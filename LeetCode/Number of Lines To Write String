/*

  We are to write the letters of a given string S, from left to right into lines. Each line has maximum width 100 units, and if writing a letter would cause the width of the line to exceed 100 units, it is written on the next line. We are given an array widths, an array where widths[0] is the width of 'a', widths[1] is the width of 'b', ..., and widths[25] is the width of 'z'.

  Now answer two questions: how many lines have at least one character from S, and what is the width used by the last such line? Return your answer as an integer list of length 2.



  Example :
  Input: 
  widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
  S = "abcdefghijklmnopqrstuvwxyz"
  Output: [3, 60]
  Explanation: 
  All letters have the same length of 10. To write all 26 letters,
  we need two full lines and one line with 60 units.
  Example :
  Input: 
  widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
  S = "bbbcccdddaaa"
  Output: [2, 4]
  Explanation: 
  All letters except 'a' have the same length of 10, and 
  "bbbcccdddaa" will cover 9 * 10 + 2 * 4 = 98 units.
  For the last 'a', it is written on the second line because
  there is only 2 units left in the first line.
  So the answer is 2 lines, plus 4 units in the second line.
*/

/*
  Its' not about %100!!!
*/
 
class Solution {
    public int[] numberOfLines(int[] widths, String S) {
        
        int lineNum = 1;
        
        int latestLineCount = 0;
        
        int curLine = 0;
        
        for(int i=0;i<S.length();i++){
            // we fill one line 100 percent, clean. Continue at the next line
            if(curLine == 100){
                lineNum++;
                latestLineCount = curLine;
                curLine = 0;
            }
            // we excceed, remove the last letter, and put that letter to the next line
            else if(curLine>100){
                lineNum++;
                latestLineCount = curLine;
                curLine = 0;
                i--;
            }
            // more and more
            curLine+=(widths[S.charAt(i)-'a']);
        }
        
        int[] res = new int[2];
        
        // if somehow the last line was not processed
        if(curLine != 0){
            latestLineCount = curLine;
            
            if(curLine>100){
                lineNum++;
                int j=S.length()-1;
                //see how many letters do not fit in current line and need to go to the next.
                while(curLine>100 && j>=0){
                    curLine -= widths[S.charAt(j--)-'a'];
                }
                latestLineCount = latestLineCount - curLine;
            }
            
        }
        
        res[0] = lineNum;
        res[1] = latestLineCount;
        
        return res;
    }
} 
