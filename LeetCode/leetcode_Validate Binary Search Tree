/* Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

    The left subtree of a node contains only nodes with keys less than the node's key.
    The right subtree of a node contains only nodes with keys greater than the node's key.
    Both the left and right subtrees must also be binary search trees.
*/

/*In-order traverse.
If the tree is a binary tree, then the result of the traversal should be sorted

*/

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isValidBST(TreeNode root)
	{
		ArrayList<Integer> traverse=new ArrayList<Integer>();
		inOrderTraverse(root, traverse);
		for(int i=1;i<traverse.size();i++)
			if(traverse.get(i)<=traverse.get(i-1))
				return false;
		return true;
	}
	public void inOrderTraverse(TreeNode root,ArrayList<Integer> traverse)
	{
		if(root==null)
			return;
		if(root.left!=null)
			inOrderTraverse(root.left,traverse);
		traverse.add(root.val);
		if(root.right!=null)
			inOrderTraverse(root.right,traverse);
	}
}
/*
	A better solution:
	root.val > all its left subtree
	root.val < all its right subtree
	
	if this cannot be satisfied, then invalid
*/ 
class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBST(root, null, null);
    }
    
    public boolean isValidBST(TreeNode root, Integer max, Integer min){
        if(root == null)
            return true;
        
        if(max != null && root.val>=max)
            return false;
        if(min != null && root.val<=min)
            return false;
        
        return isValidBST(root.left, root.val, min) && isValidBST(root.right, max, root.val);
    }
}
