/*
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]

You should return [1,2,3,6,9,8,7,4,5]. 
*/

/*ideas
In each loop, we first go right, go down, then go left and go up.
After each loop, both vertical and horizontal boundry decrease by 2.

At the beginning of each loop, check if there is only one row or column left.
If there is only one row, traverse from left to right and break;
If there is only one column left, traverse from top to down and break.

*/

public class Solution {
    public ArrayList<Integer> spiralOrder(int[][] matrix) {
        if(matrix==null || matrix.length==0)return new ArrayList<Integer>();
		int m=matrix.length;
        int n=matrix[0].length;
        ArrayList<Integer> result=new ArrayList<Integer>();
        
        int x=0,y=0;
        
        while(m>0 && n>0)
        {
        	if(m==1)
        	{
        		for(int i=0;i<n;i++)
        		{
        			result.add(matrix[x][y]);
        			y++;
        		}
        		break;
        	}
        	else if(n==1)
        	{
        		for(int i=0;i<m;i++)
        		{
        			result.add(matrix[x][y]);
        			x++;
        		}
        		break;
        			
        	}
        	for(int i=0;i<n-1;i++)
        	{
        		result.add(matrix[x][y]);
        		y++;
        	}
        	for(int i=0;i<m-1;i++)
        	{
        		result.add(matrix[x][y]);
        		x++;
        	}
        	for(int i=0;i<n-1;i++)
        	{
        		result.add(matrix[x][y]);
        		y--;
        	}
        	for(int i=0;i<m-1;i++)
        	{
        		result.add(matrix[x][y]);
        		x--;
        	}
        	n-=2;
        	m-=2;
        	x++;
        	y++;
        }
        return result;
    }
}
//2015/12/22: it has been a while. I had some ideas but cannot implement. Here comes a more intuitive solution.

public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res=new LinkedList<>();
        if(matrix==null||matrix.length==0)
            return res;
        // the boundries in four directions
        int rowBegin=0;
        int colBegin=0;
        int rowEnd=matrix.length-1;
        int colEnd=matrix[0].length-1;
        
        while(rowBegin<=rowEnd && colBegin<=colEnd){
        	// right
        	for(int i=colBegin;i<=colEnd;i++)
        		res.add(matrix[rowBegin][i]);
        	rowBegin++;
        	//down
        	for(int i=rowBegin;i<=rowEnd;i++)
        		res.add(matrix[i][colEnd]);
        	colEnd--;
        	
        	//check if there if any more rows to traverse
        	if(rowBegin<=rowEnd){
        		// left
            	for(int i=colEnd;i>=colBegin;i--)
            		res.add(matrix[rowEnd][i]);
            }
            rowEnd--;
        	
        	// check if there is any more cols to traverse
        	if(colBegin<=colEnd){
        		//up
            	for(int i=rowEnd;i>=rowBegin;i--)
            		res.add(matrix[i][colBegin]);
            }
            colBegin++;
        	
        }
        return res;
    }
}
