/*
  Reverse digits of an integer.

  Example1: x = 123, return 321
  Example2: x = -123, return -321
  
  click to show spoilers.
  
  Have you thought about this?
  Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!
  
  If the integer's last digit is 0, what should the output be? ie, cases such as 10, 100.
  
  Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?
  
  For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
  
  Update (2014-11-10):
  Test cases had been added to test the overflow behavior.
*/

/*
  pay attention to the corner case (overflow)
*/

public class Solution {
    public int reverse(int x) {
	        int res=0; // store the result
	        while(x!=0){
	        	int bit=x%10; // the current last bit
	        	int newRes=res*10+bit; // the new result (could overflow)
	        	if((newRes-bit)/10!=res) // to check if it overflows
	        		return 0;
	        	res=newRes; // no overflow? update
	        	x/=10;
	        }
	        return res;
	    }
}
//2015/10/20: get stuck with the corner case of overflow
