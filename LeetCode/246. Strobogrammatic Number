/*
  A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).

  Write a function to determine if a number is strobogrammatic. The number is represented as a string.

  For example, the numbers "69", "88", and "818" are all strobogrammatic.


*/

class Solution {
    public boolean isStrobogrammatic(String num) {
        if(num == null ||num.length()==0)
            return true;
        
        Set<Character> badNums = new HashSet<>();
        badNums.add('2');
        badNums.add('3');
        badNums.add('4');
        badNums.add('5');
        badNums.add('7');
        
        if(num.length()==1)
            if(badNums.contains(num.charAt(0)) || num.charAt(0) =='6' || num.charAt(0) =='9')
                return false;
            else
                return true;
        
        char[] arr = num.toCharArray();
        int l=0;
        int r = arr.length-1;
        
        while(l<=r){
            
            if(badNums.contains(arr[l]) || badNums.contains(arr[r]) )
                return false;
            
            else if(arr[l] == '6' && arr[r] == '9' || arr[l] == '9' && arr[r] == '6' || (arr[l] == arr[r] && arr[l] != '6' && arr[l] != '9' )){
                l++;
                r--;
            }
            
            else
                return false;
            
        }
        
        return true;
    }
}

/*
  Same idea: short version
*/

public boolean isStrobogrammatic(String num) {
    for (int i=0, j=num.length()-1; i <= j; i++, j--)
        if (!"00 11 88 696".contains(num.charAt(i) + "" + num.charAt(j)))
            return false;
    return true;
}

