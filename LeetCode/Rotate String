/*
  We are given two strings, A and B.

  A shift on A consists of taking string A and moving the leftmost character to the rightmost position. For example, if A = 'abcde', then it will be 'bcdea' after one shift on A. Return True if and only if A can become B after some number of shifts on A.

  Example 1:
  Input: A = 'abcde', B = 'cdeab'
  Output: true

  Example 2:
  Input: A = 'abcde', B = 'abced'
  Output: false
*/

/*
  String A will come back to itself after shifting (A.length()) times
*/

class Solution {
    public boolean rotateString(String A, String B) {
        
        if(! (A==null && B==null || A!= null && B!=null) )
            return false;
        
        if(A.length() != B.length())
            return false;
        
        if(A.length()==0)
            return true;
        
        // after shifting A.length times, A will come back to A
        for(int i=0;i<A.length();i++){
            A = shift(A);
            if(A.equals(B))
                return true;
        }
        
        return false;
    }
    
    public String shift(String str) {
        if(str.length() == 1)
            return str;
        
        StringBuilder sb = new StringBuilder();
        sb.append(str.substring(1, str.length()));
        sb.append(str.charAt(0));
        
        return sb.toString();
    }
}

// however, there's an smart way...
class Solution {
    public boolean rotateString(String A, String B) {
        
        if(! (A==null && B==null || A!= null && B!=null) )
            return false;
        
        return A.length() != B.length() ? false : (A+A).indexOf(B) != -1 ? 
                                                                true:false;
    }
}
