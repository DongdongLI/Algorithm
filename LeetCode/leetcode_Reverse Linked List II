/*
  Reverse a linked list from position m to n. Do it in-place and in one-pass.

  For example:
  Given 1->2->3->4->5->NULL, m = 2 and n = 4,
  
  return 1->4->3->2->5->NULL.
  
  Note:
  Given m, n satisfy the following condition:
  1 ≤ m ≤ n ≤ length of list.
*/

/*
  Idea: keep inserting nodes between pre and the node after it.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
		if(head==null||head.next==null)
			return head;
		ListNode dummyHead=new ListNode(0);
		dummyHead.next=head;
		head=dummyHead;
		
		ListNode p=head;
		ListNode q=head;
		for(int i=0;i<m-1;i++){
			p=p.next;
		}
		
		ListNode pre=p;
		ListNode start=p.next;
		ListNode then=start.next;
		
		for(int i=0;i<n-m;i++){
			start.next=then.next;
			then.next=pre.next;
			pre.next=then;
			then=start.next;
		}
		return head.next;
    }
	
}

//2015/12/12: still have problem reverting sub list in place.
