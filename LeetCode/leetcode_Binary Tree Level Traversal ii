/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:

[
  [15,7],
  [9,20],
  [3]
]

confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.
*/
/*
Based on Binary tree Level Order Traversal i, reverse the result set before returning it.
*/

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {
        ArrayList<ArrayList<Integer>> result=new ArrayList<ArrayList<Integer>>();
		if(root==null)
			return result;
		
		int curCount=1;
		int nextCount=0;
		LinkedList<TreeNode> queue=new LinkedList<TreeNode>();
		queue.add(root);
		ArrayList<Integer> partRes=new ArrayList<Integer>();
		while(!queue.isEmpty())
		{
			
			TreeNode node=queue.poll();
			partRes.add(node.val);
			curCount--;
			
			if(node.left!=null){
				queue.add(node.left);
				nextCount++;
			}
			if(node.right!=null){
				queue.add(node.right);
				nextCount++;
			}
			
			if(curCount==0)
			{
				curCount=nextCount;
				nextCount=0;
				result.add(new ArrayList<Integer>(partRes));
				partRes=new ArrayList<Integer>();
			}
		}
		Collections.reverse(result);
		return result;
    }
}
