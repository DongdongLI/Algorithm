/*
  Given an m * n matrix M initialized with all 0's and several update operations.

  Operations are represented by a 2D array, and each operation is represented by an array with two positive integers a and b, which means M[i][j] should be added by one for all 0 <= i < a and 0 <= j < b.

  You need to count and return the number of maximum integers in the matrix after performing all the operations.

  Example 1:
  Input: 
  m = 3, n = 3
  operations = [[2,2],[3,3]]
  Output: 4
  Explanation: 
  Initially, M = 
  [[0, 0, 0],
   [0, 0, 0],
   [0, 0, 0]]

  After performing [2,2], M = 
  [[1, 1, 0],
   [1, 1, 0],
   [0, 0, 0]]

  After performing [3,3], M = 
  [[2, 2, 1],
   [2, 2, 1],
   [1, 1, 1]]

  So the maximum integer in M is 2, and there are four of it in M. So return 4.
  Note:
  The range of m and n is [1,40000].
  The range of a is [1,m], and the range of b is [1,n].
  The range of operations size won't exceed 10,000.
*/

/*
  The trivial way is so obviously simple and insuffient, so I have been looking for the real solution.
  
  * The first operation will get few cells a headstart, and they doomed to be the ones with largest ingeter. 
  because each operation start at index 0.
  
  So we have the upper boundry.
  
  Now we traverse the list of operations, if an operation cover less area then the current max area, then the area shrink.
  
  
*/

public class Solution {
    public int maxCount(int m, int n, int[][] ops) {
        
        if(ops==null || ops.length==0)return m*n;
        
        int maxRangeA = ops[0][0];
        int maxRangeB = ops[0][1];
        
        for(int[] op: ops){
            int a = op[0];
            int b = op[1];
            
            if(a-1< maxRangeA)
                maxRangeA = a-1;
                
            if(b-1< maxRangeB)
                maxRangeB = b-1;
        }
        
        return (maxRangeA+1)*(maxRangeB+1);
    }
}
