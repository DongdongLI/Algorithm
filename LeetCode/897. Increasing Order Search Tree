/*

  Given a tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.

  Example 1:
  Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]

         5
        / \
      3    6
     / \    \
    2   4    8
   /        / \ 
  1        7   9

  Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
              \
               7
                \
                 8
                  \
                   9  
  Note:

  The number of nodes in the given tree will be between 1 and 100.
  Each node will have a unique integer value from 0 to 1000.
*/

/*
    Trivial and slow way.
    get the result of in-order traverse, then rebuild the tree
*/
class Solution {
    public TreeNode increasingBST(TreeNode root) {
        if(root == null || root.left==null&&root.right==null) return root;
        
        List<Integer> inOrderTraverseRes = new ArrayList<>(); 
        inorder(root, inOrderTraverseRes);
        TreeNode res = new TreeNode(inOrderTraverseRes.get(0));
        TreeNode node = res;
        for(int i=1;i<inOrderTraverseRes.size();i++){
            node.right = new TreeNode(inOrderTraverseRes.get(i));
            node = node.right;
        }
        return res;
    }
    
    private void inorder(TreeNode node, List<Integer> list) {
        if(node == null)return;
        inorder(node.left, list);
        list.add(node.val);
        inorder(node.right, list);
    }
}

/*
    Smart way
*/

class Solution {
    public TreeNode increasingBST(TreeNode root) {
        return helper(root, null);
    }
    // tail means the part that has already been sorted
    public TreeNode helper(TreeNode root, TreeNode tail) {
        if(root == null)return tail;
        // Deal with the left sub-tree, then stick root to the end
        TreeNode head = helper(root.left, root);
        // there will be no left-child anymore, so
        root.left = null;
        // the right will the result of rearrange of root.right and then stick tail to the end
        root.right = helper(root.right, tail);
        return head;
    }
}
