/*
  Given a linked list, swap every two adjacent nodes and return its head.

  For example,
  Given 1->2->3->4, you should return the list as 2->1->4->3.
  
  Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
*/

/*
  Idea:
  make a dummy head
  
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head==null || head.next==null)
        	return head;
        
        ListNode dumbHead=new ListNode(0);
        dumbHead.next=head;
        ListNode p=dumbHead;
    	
        while(p!=null){
        	if(p.next!=null && p.next.next!=null){ // in each round, three nodes get involved
        		ListNode third=p.next.next.next; // this one will hold its position(not moving)
        		ListNode first=p.next; // the first is going to be swapped with the secoond
        		ListNode second=p.next.next;
        		
        		p.next=second;
        		p.next.next=first;
        		p.next.next.next=third;
        		
        	}
        	p=p.next; // there may be odd number of elements
        	if(p!=null) // so need to check first
        	    p=p.next;
        	else
        	    break;
        }
        return dumbHead.next;
    }
}
//2015/10/24: nail it
