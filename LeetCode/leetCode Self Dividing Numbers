/*
  A self-dividing number is a number that is divisible by every digit it contains.

  For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

  Also, a self-dividing number is not allowed to contain the digit zero.

  Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

  Example 1:
  Input: 
  left = 1, right = 22
  Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
*/


class Solution {
    public List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer> res = new ArrayList<>();
        for(int i=left;i<=right;i++) {
            if(i%10 != 0 && isSelfDividing(i))
                res.add(i);
        }
        
        return res;
    }
    
    public List<Integer> getDigits(int num){
        List<Integer> digits = new ArrayList<>();
        
        while(num != 0){
            digits.add(num%10);
            num/=10;
        }
        return digits;
    }
    
    public boolean isSelfDividing(int num){
        List<Integer> list = getDigits(num);
        
        for(int i: list){
            if(i==0||num%i != 0)
                return false;
        }
        
        return true;
    }
}
