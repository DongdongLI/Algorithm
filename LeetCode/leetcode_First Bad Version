/*
  You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version 
  of your product fails the quality check. Since each version is developed based on the previous version, all the versions 
  after a bad version are also bad.

  Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones 
  to be bad.
  
  You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the 
  first bad version. You should minimize the number of calls to the API.
*/

/*
  At first I was thinking about using binary search, but even this turned out to be too slow... 
  Actually the reason it does not pass is that I used "mid=(l+r)/2" instead of "mid=l+(r-l)/2"
*/

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
		if(n<1)return 0;
		// two boundries
		int l=1; 
		int r=n;
		while(l<r){
			
			int mid=l+(r-l)/2;
			if(isBadVersion(mid)){ // the middle one is bad then the first bad should be in the left park
				r=mid; 
			}else{ // in the right part
				l=mid+1;
			}
		}
		
		return l;
	}
}
