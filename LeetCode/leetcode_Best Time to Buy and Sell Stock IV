/*
    Say you have an array for which the ith element is the price of a given stock on day i.

    Design an algorithm to find the maximum profit. You may complete at most k transactions.
    
    Note:
    You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
*/

/*
    The idea has been discussed in III of this series.
*/
public class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices==null || prices.length<=0)return 0;
    	
    	int len = prices.length;
        if (k >= len / 2) return quickSolve(prices);  // it means that in this case, transactions can be make everyday
    	
    	int maxProfit=0;
    	
    	int[][] f=new int[k+1][prices.length];
    	for(int kk=1;kk<=k;kk++){
    		int tmpMax=f[kk-1][0]-prices[0];
    		for(int ii=1;ii<prices.length;ii++){
    			f[kk][ii]=Math.max(f[kk][ii-1], prices[ii]+tmpMax);
    			tmpMax=Math.max(tmpMax,f[kk-1][ii]-prices[ii]);
    			maxProfit=Math.max(maxProfit, f[kk][ii]);
    		}
    	}
    	return f[k][len-1];
    }
    
    public int quickSolve(int[] prices){ // as long as there is higher price, there is profit
        int profit=0;
        for(int i=1;i<prices.length;i++){
            if(prices[i]>prices[i-1])
                profit+=(prices[i]-prices[i-1]);
        }
        return profit;
    }
}
