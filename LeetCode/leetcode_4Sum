/*
  Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all 
  unique quadruplets in the array which gives the sum of target.

  Note:
  Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
  The solution set must not contain duplicate quadruplets.
      For example, given array S = {1 0 -1 0 -2 2}, and target = 0.
  
      A solution set is:
      (-1,  0, 0, 1)
      (-2, -1, 1, 2)
      (-2,  0, 0, 2)
*/

/*
  Idea: n^n solution.
  sort
  
  Fix the position of the first two elements, marked as i and j. The third one starts at j+1, and the last one starts at the 
  last possible index.
  
  based on the relation between sum and the target, adjust the left and right.
  one thing to keep in mind is that the duplicate of four numbers all need to be checked.
*/

public class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
    	List<List<Integer>> res=new LinkedList<List<Integer>>();
    	if(nums==null || nums.length==0)
    		return res;
    	
    	Arrays.sort(nums);
    	
    	for(int i=0;i<nums.length-3;i++){ // fix the first number
    		for(int j=i+1;j<nums.length-2;j++){ // fix the second number
    			// the third and the fourth start at two side and move to the middle
    			int l=j+1;
    			int r=nums.length-1;
    			
    			while(l<r){
    				int sum=nums[l]+nums[r]+nums[i]+nums[j];
    				if(sum==target){
    					List<Integer> temp=new LinkedList<Integer>();
    					temp.add(nums[i]);
    					temp.add(nums[j]);
    					temp.add(nums[l]);
    					temp.add(nums[r]);
    					
    					res.add(temp);
    					
    					l++;
    					r--;
    					while(l<r && nums[l]==nums[l-1])
    						l++;
    					while(l<r && nums[r]==nums[r+1])
    						r--;
    				}else if(sum<target){
    					l++;
    				}else{
    					r--;
    				}
    			}
    			while(j+1<nums.length&&nums[j+1]==nums[j])j++;// check if the second number has duplicate
    		}
    		while(i+1<nums.length&&nums[i+1]==nums[i])i++; // check if the first number has duplicate
    	}
    	return res;
    }
}

//2015/10/22: kind of nail it after cheating a little bit.
//2015/12/20: nail it.
