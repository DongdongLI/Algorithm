/*
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

    Integers in each row are sorted from left to right.
    The first integer of each row is greater than the last integer of the previous row.

For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]

Given target = 3, return true.
*/
/*ideas:
divide and counque:

Since each row is sorted is sorted from left to right and the first element of each row is larger then the last one of previous
row, we first find out where the target can be and use binary search to search the area.
*/
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix==null || matrix.length==0)return false;
		int m=matrix.length;
        int n=matrix[0].length;
        
        return helper(matrix,target,0,m-1);
    }
	public boolean helper(int[][] matrix, int target,int start,int end)
	{
		
		while(start<=end)
        {
			int mid=(start+end)/2;
        	if(matrix[mid][0]<=target && matrix[mid][matrix[mid].length-1]>=target)
        		return binarySearch(0,matrix[mid].length-1,matrix[mid],target);
        	else if(matrix[mid][0]>target)
        	{
        		end=mid-1;
        	}
        	else
        	{
        		start=mid+1;
        	}
        }
		return false;
	}
	public boolean binarySearch(int l,int r,int[] num,int target)
	{
		while(l<=r)
		{
			int mid=(l+r)/2;
			if(num[mid]==target)
				return true;
			else if(num[mid]<target)
			{
				return binarySearch(mid+1,r,num,target);
			}
			else
				return binarySearch(l,mid-1,num,target);
			
		}
		return false;
	}
}

//2015.8.4 review: nail it!! (seems faster)
package leetcodePlayground;

public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix==null || matrix.length==0)
        	return false;
        
        int m=matrix.length;
        int n=matrix[0].length;
        // to see if target is out of range
        if(target<matrix[0][0]||target>matrix[m-1][n-1])
        	return false;
        // find the only row that the target may appear
        int row=-1;
        for(int i=0;i<m;i++){
        	if(target<matrix[i][0]){
        		row=i-1;
        		break;
        	}
        }
        if(row==-1)
        	row=m-1;
        return binarySearch(matrix[row], 0, n-1, target);
        
    }
    public boolean binarySearch(int[] a,int l,int r,int target){
    		if(l>r)
    			return false;
    		int mid=(l+r)/2;
    		if(a[mid]==target)
    			return true;
    		else if(a[mid]<target)
    			return binarySearch(a, mid+1, r, target);
    		else
    			return binarySearch(a, l, mid-1, target);
    	
    }
}
