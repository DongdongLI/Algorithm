/*
  Given a binary tree, return the inorder traversal of its nodes' values.

  For example:
  Given binary tree {1,#,2,3},
     1
      \
       2
      /
     3
  return [1,3,2].
  
  Note: Recursive solution is trivial, could you do it iteratively?
*/

//2015/12/26: not the first time, nail the trivial solution

public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res=new LinkedList<>();
        help(res, root);
        return res;
    }
	public void help(List<Integer> res,TreeNode node){
		if(node!=null){
		if(node.left!=null)
			help(res,node.left);
		res.add(node.val);
		if(node.right!=null)
			help(res,node.right);
		}
	}
}

// iterative way
/*
  the usage of stack is very important since this is the only ways to keep track of the previous node
*/
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res=new LinkedList<>();
        Stack<TreeNode> stack=new Stack<>();
        
        TreeNode cur=root;
        while(cur!=null||!stack.isEmpty()){
        	while(cur!= null){
        		stack.add(cur);
        		cur=cur.left;
        	}
        	cur=stack.pop();
        	res.add(cur.val);
        	cur=cur.right;
        }
        return res;
	}
}
