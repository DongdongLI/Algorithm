/*
 Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3. 
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 
 /*ideas
 Make up a fake head.
 */
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode prev=new ListNode(0);
        prev.next=head;
        head=prev;
        
        ListNode n1=head;
        while(n1.next!=null)
        {
        	ListNode n2=n1.next;
        	while(n2.next!=null && n2.val==n2.next.val)
        	{
        		n2=n2.next;
        	}
        	if(n2!=n1.next)n1.next=n2.next;
        	else
        	{
        		n1=n1.next;
        	}
        }
        return prev.next;
    }
}

//2015/12/7: struggle and finish
/*
  pre: the end of the list without duplicate
  cur: the node being process
  
  if the cur and node next have same val, move the cur to a node whose value is different
   set pre.next to this.
  else:
   pre and cur move together
*/

public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head==null)return head;
    	ListNode fakeHead=new ListNode(0);
    	fakeHead.next=head;
    	
    	head=fakeHead;
    	
    	ListNode pre=head;
    	ListNode cur=head.next;
    	
    	while(cur!=null){
    		if(cur.next!=null&&cur.next.val==cur.val){
	    		while(cur.next!=null&&cur.next.val==cur.val){
	    			cur=cur.next;
	    		}
		    		pre.next=cur.next;
		    		cur=cur.next;
		    }
    		else{
    			pre=pre.next;
    			cur=cur.next;
    		}
        }
        return fakeHead.next;
    }
}
