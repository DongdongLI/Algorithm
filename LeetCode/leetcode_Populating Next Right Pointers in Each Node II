Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

    You may only use constant extra space.

For example,
Given the following binary tree,

         1
       /  \
      2    3
     / \    \
    4   5    7

After calling your function, the tree should look like:

         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL

//solution 1: best
/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root==null)return;
		
        if(root.left!=null)
        {
        	if(root.right!=null)
        	{
        		root.left.next=root.right;
        	}
        	else
        	{
        		TreeLinkNode p=root.next;
        		while(p!=null&&p.left==null &&p.right==null)//找到这一层最右边的不是两个孩子都为空的节点
        			p=p.next;
        		if(p!=null)
        		{
        			if(p.left!=null)
        				root.left.next=p.left;
        			else
        				root.left.next=p.right;
        		}
        	}
        }
        if(root.right!=null)
        {
        	TreeLinkNode p=root.next;
        	while(p!=null&&p.left==null &&p.right==null)
        		p=p.next;
        	if(p!=null)
        	{
    			if(p.left!=null)
    				root.right.next=p.left;
    			else
    				root.right.next=p.right;
    		}
        }
        connect(root.right);//先连接右边的节点！！ 否则会导致错误
        connect(root.left);
    }
    
}
