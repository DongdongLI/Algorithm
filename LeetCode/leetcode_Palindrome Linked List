/*
  Given a singly linked list, determine if it is a palindrome.

  Follow up:
  Could you do it in O(n) time and O(1) space?
*/

/*
    idea: fast and slow pointer; reverse the second half of the list; compare
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null)return true;
        
        ListNode fast=head;
        ListNode slow=head;
        
        while(fast.next!=null && fast.next.next!=null){
        	fast=fast.next.next;
        	slow=slow.next;
        }
        ListNode secondHead=slow.next;
        slow.next=null;
        
        ListNode pre=secondHead;
        ListNode cur=secondHead.next;
        
        while(cur!=null){
        	ListNode temp=cur.next;
        	cur.next=pre;
        	pre=cur;
        	cur=temp;
        }
        secondHead.next=null;
        
        while(head!=null && pre!=null){
        	if(head.val!=pre.val)
        		return false;
        	head=head.next;
        	pre=pre.next;		
        }
        
        return true;
    }
}
