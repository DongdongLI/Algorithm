/*
  Given a singly linked list, determine if it is a palindrome.

  Follow up:
  Could you do it in O(n) time and O(1) space?
*/

/*
    idea: fast and slow pointer; reverse the second half of the list; compare
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null)return true;
        
        ListNode fast=head;
        ListNode slow=head;
        
        while(fast.next!=null && fast.next.next!=null){
        	fast=fast.next.next;
        	slow=slow.next;
        }
        ListNode secondHead=slow.next;
        slow.next=null;
        
        ListNode pre=secondHead;
        ListNode cur=secondHead.next;
        
        while(cur!=null){
        	ListNode temp=cur.next;
        	cur.next=pre;
        	pre=cur;
        	cur=temp;
        }
        secondHead.next=null;
        
        while(head!=null && pre!=null){
        	if(head.val!=pre.val)
        		return false;
        	head=head.next;
        	pre=pre.next;		
        }
        
        return true;
    }
}

// yet another method
/*
  1. fast and slow pointer, find the mid point.
  2. based on the fast pointer, find out if the length is even or odd
  3. reverse the second half (start from slow)
  4. compare each node
*/
public class Solution {
    public boolean isPalindrome(ListNode head) {
    	if(head==null || head.next==null)
    		return true;
    	
    	ListNode slow=head;
    	ListNode fast=head;
    	
    	while(fast.next!=null){
    		slow=slow.next;
    		fast=fast.next.next;
    	}
    	// slow in position.
    	// check if fast if null so we can get if the length is odd or even
    	ListNode secondHalf;
    	if(fast==null){//even
    		secondHalf=reverse(slow);
    	}else{// odd
    		slow=slow.next;
    		secondHalf=reverse(slow);
    	}
    	
    	ListNode h1=head;
    	ListNode h2=secondHalf;
    	
    	while(h2!=null){
    		if(h1.val!=h2.val)
    			return false;
    		h1=h1.next;
    		h2=h2.next;
    	}
    	return true;
    }
    
    public ListNode reverse(ListNode head){
    	if(head==null || head.next==null)
    		return head;
    	
    	ListNode pre=head;
    	ListNode cur=head.next;
    	
    	while(cur!=null){
    		ListNode temp=cur.next;
    		cur.next=pre;
    		
    		pre=cur;
    		cur=temp;
    	}
    	head.next=null;
    	return pre;
    }
}
