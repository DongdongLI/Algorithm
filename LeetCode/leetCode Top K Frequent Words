/*
  Given a non-empty list of words, return the k most frequent elements.

  Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.

  Example 1:
  Input: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
  Output: ["i", "love"]
  Explanation: "i" and "love" are the two most frequent words.
      Note that "i" comes before "love" due to a lower alphabetical order.
  Example 2:
  Input: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4
  Output: ["the", "is", "sunny", "day"]
  Explanation: "the", "is", "sunny" and "day" are the four most frequent words,
      with the number of occurrence being 4, 3, 2 and 1 respectively.
 
 
 Note:
  You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
  Input words contain only lowercase letters.
  Follow up:
  Try to solve it in O(n log k) time and O(n) extra space.
*/
/*
  The trick is to deal with the PriorityQueue
  Entry<Key,Value>: key is a string while value is integer
  
  compare by integer if they are different
  compare by key if the values are the same
*/

class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        
        List<String> res = new ArrayList();
            
        PriorityQueue<Map.Entry<String, Integer>> pqueue = new PriorityQueue(new Comparator<Map.Entry<String, Integer>>(){
            @Override
            public int compare(Map.Entry<String, Integer> entry1, Map.Entry<String, Integer> entry2){
                if(entry1.getValue() == entry2.getValue()){
                    return entry1.getKey().compareTo(entry2.getKey());
                }
                return entry2.getValue() - entry1.getValue();   
            }
        });
        
        Map<String, Integer> map = new HashMap<>();
        for(String str: words){
            if(map.containsKey(str))
                map.put(str, map.get(str)+1);
            else
                map.put(str, 1);
        }
        
        pqueue.addAll(map.entrySet());
        
        int i=0;
        while(i<k){
            res.add(pqueue.poll().getKey());
            i++;
        }
        
        return res;
    }
}
