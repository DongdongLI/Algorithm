/*
  Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

  For example,
  Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.
  
  Window position                Max
  ---------------               -----
  [1  3  -1] -3  5  3  6  7       3
   1 [3  -1  -3] 5  3  6  7       3
   1  3 [-1  -3  5] 3  6  7       5
   1  3  -1 [-3  5  3] 6  7       5
   1  3  -1  -3 [5  3  6] 7       6
   1  3  -1  -3  5 [3  6  7]      7
  Therefore, return the max sliding window as [3,3,5,5,6,7].
  
  Note: 
  You may assume k is always valid, ie: 1 ≤ k ≤ input array's size for non-empty array.
*/

/*
    Trivial Solution(Very slow): use min heap to store the elements
*/
public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums==null || nums.length==0)
        	return new int[k];
        
        int[] res=new int[nums.length-k+1];
        
        PriorityQueue<Integer> heap=new PriorityQueue<>(new Comparator<Integer>() {
        	public int compare(Integer i1,Integer i2){
        		if(i1<i2)
        			return 1;
        		else if(i1>i2)
        			return -1;
        		else
        			return 0;
        	}
        });
        
        int resInd=0;
        for(int i=0;i+k<=nums.length;i++){
        	for(int j=i;j<i+k;j++){
        		heap.offer(nums[j]);
        	}
        	res[resInd++]=heap.peek();
        	heap.clear();
        }
        return res;
    }
}

/*
    one smart way, is to use double ended queue:
    
*/
public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
    	if(nums==null || nums.length==0)
    		return new int[0];
    	int[] res=new int[nums.length-k+1]; // total number of the windows
    	int resInd=0;
        Deque<Integer> deque=new ArrayDeque<>(); // this is used to store all the indexes
        for(int i=0;i<nums.length;i++){ 
        	while(!deque.isEmpty() && deque.peek()<i-k+1) // remove all index that is out of range k
        		deque.remove();
        	
        	while(!deque.isEmpty()&& nums[deque.peekLast()]<nums[i]) // start from the last one, delete all indexes that has a smaller value
        		deque.removeLast();
        	
        	deque.offer(i); // put i in
        	if(i>=k-1) // careful
        		res[resInd++]=nums[deque.peek()];
        }
        return res;
    }
}

/*
    It turns out that in PriorityQueue, we can delete a particular element
    So there is a faster of the trivial method
*/
...
 for(int i=0;i+k<=nums.length;i++){
        	for(int j=i;j<i+k;j++){
        		heap.offer(nums[j]);
        	}
        	res[resInd++]=heap.peek();
        	if(i>=k-1)
        		heap.remove(nums[i-k+1]);
        }
  .....
