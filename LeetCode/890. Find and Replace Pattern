/*
  You have a list of words and a pattern, and you want to know which words in words matches the pattern.

  A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

  (Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.)

  Return a list of the words in words that match the given pattern. 

  You may return the answer in any order.



  Example 1:

  Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
  Output: ["mee","aqq"]
  Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
  "ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,
  since a and b map to the same letter.


  Note:

  1 <= words.length <= 50
  1 <= pattern.length = words[i].length <= 20
*/

class Solution {
    public List<String> findAndReplacePattern(String[] words, String pattern) {
        List<String> list = new ArrayList<>();
        
        Map<Character, Character> mapping = new HashMap<>();
        Set<Character> mapped = new HashSet<>();
        
        for(String word: words) {
            for(int i=0;i<word.length();i++) {
                // two conditions to remove invalid words
                // a letter has shown up before, but this time it's going to be mapped to another letter
                // or the letter in the pattern has shown up before, meaning two different letters will map to the same letter
                if(mapping.containsKey(word.charAt(i)) && mapping.get(word.charAt(i)) != pattern.charAt(i)
                  ||!mapping.containsKey(word.charAt(i)) && mapped.contains(pattern.charAt(i)))
                    break;
                
                mapping.put(word.charAt(i), pattern.charAt(i));
                mapped.add(pattern.charAt(i));
                
                if(i==word.length()-1)
                    list.add(word);
            }
            mapping.clear();
            mapped.clear();
        }
        
        return list;
    }
}
