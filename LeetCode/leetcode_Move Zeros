/*
  Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero 
  elements.

  For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].
  
  Note:
  You must do this in-place without making a copy of the array.
  Minimize the total number of operations.
*/

/*
    Idea: two cursors moving together. i points to the first 0 it meets, and j start from i+1, points to the first number that 
    is not zero. Then, swap nums[i] and nums[j]
*/

public class Solution {
    public void moveZeroes(int[] nums) {
    	if(nums==null || nums.length==0)
    		return;
    	
    	int i=0;
    	int j=0;
    	int len=nums.length;
    	
    	while(i<len&&j<len){
    		while(i<len && nums[i]!=0){
    			i++;
    		}
    		j=i+1;
    		while(j<len && nums[j]==0){
    			j++;
    		}
    		
    		if(i>=len || j>=len)return;
    		
    		int t=nums[i];
    		nums[i]=nums[j];
    		nums[j]=t;
    		
    		i++;
    	}
    }
}
//2015/12/15: almost forgot.
// brand new solution.
/*
    Keep something known as insertpoint:
    it is the index of the insertion point for those non-zero element
*/

public void moveZeroes(int[] nums) {
		if(nums==null||nums.length==0)
			return;
		
		int insertPoint=0;
		for(int i:nums){
			if(i!=0) // for the non-zero element,
				nums[insertPoint++]=i; // insert it to the insert point index, then move forward the insert point
		}
		// each number has been inserted, so if there is some more space, they should be filled with 0s.
		if(insertPoint<nums.length-1)
			while(insertPoint<nums.length-1){
				nums[insertPoint++]=0;
			}
    }
