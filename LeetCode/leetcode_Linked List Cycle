/*
Linked List Cycle
Total Accepted: 47280 Total Submissions: 130446

Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?


*/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 
 /*
 Use fast and slow pointer, check if they equal to each other at any point
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null||head.next==null)return false;
		ListNode fast=head;
		ListNode slow=head;
		
		while(fast!=null&&fast.next!=null&&fast.next.next!=null)
		{
			fast=fast.next.next;
			slow=slow.next;
			if(fast==slow)
				return true;
		}
		return false;
    }
}
//2015/12/7: nail it.
