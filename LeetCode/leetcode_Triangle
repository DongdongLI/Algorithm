/*
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]

The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle. 
*/

/*
自底向上： 比如
  6
4   1
考虑的就是1还是4 和6 加起来会得到较小的值， 同理
  5       7
1   8   8   3
*/

public class Solution {//dynamic programming bottom up(makes sure opimality)
    public int minimumTotal(List<List<Integer>> triangle) {
        int[] res=new int[triangle.size()];
        for(int i=0;i<triangle.get(triangle.size()-1).size();i++)
        	res[i]=triangle.get(triangle.size()-1).get(i);
        
        for(int i=triangle.size()-2;i>=0;i--)
        {
        	int len=triangle.get(i).size();
        	for(int j=0;j<len;j++)
        	{
        		res[j]=Math.min(res[j], res[j+1])+triangle.get(i).get(j);//dp[j] = Math.min(dp[j], dp[j + 1]) + triangle.get(i).get(j);
        	}
        }
        return res[0];
    }
}
