/*
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]

The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle. 
*/

/*
自底向上： 比如
  6
4   1
考虑的就是1还是4 和6 加起来会得到较小的值， 同理
  5       7
1   8   8   3
*/
public class Solution {//dynamic programming bottom up(makes sure opimality)
    public int minimumTotal(List<List<Integer>> triangle) {
        int[] res=new int[triangle.size()];
        for(int i=0;i<triangle.get(triangle.size()-1).size();i++)
        	res[i]=triangle.get(triangle.size()-1).get(i);
        
        for(int i=triangle.size()-2;i>=0;i--)
        {
        	int len=triangle.get(i).size();
        	for(int j=0;j<len;j++)
        	{
        		res[j]=Math.min(res[j], res[j+1])+triangle.get(i).get(j);//dp[j] = Math.min(dp[j], dp[j + 1]) + triangle.get(i).get(j);
        	}
        }
        return res[0];
    }
}

// 2015/12/21: completely forgot.
// 2016/1/10: nail it

it seems faster?
public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        if(triangle==null || triangle.size()==0)
            return 0;
        
        int n=triangle.size();
        if(n==1)
            return triangle.get(0).get(0);
            
        int[][] dp=new int[n][n];
        dp[0][0]=triangle.get(0).get(0);
        
        dp[1][0]=triangle.get(1).get(0)+dp[0][0];
        dp[1][1]=triangle.get(1).get(1)+dp[0][0];
        for(int i=2;i<n;i++){
            dp[i][0]=triangle.get(i).get(0)+dp[i-1][0];
            for(int j=1;j<i;j++){
                dp[i][j]=triangle.get(i).get(j)+Math.min(dp[i-1][j-1],dp[i-1][j]);
            }
            dp[i][i]=triangle.get(i).get(i)+dp[i-1][i-1];
        }
        Arrays.sort(dp[n-1]);
        return dp[n-1][0];
    }
}
