/*
  Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

  For example,
  If n = 4 and k = 2, a solution is:

  [
    [2,4],
    [3,4],
    [2,3],
    [1,2],
    [1,3],
    [1,4],
  ]
*/

/*
  silver bullet:
      part.add(i);
      helper(res, part, i+1, n, k);
      part.remove(part.size()-1);
*/
class Solution {
    public List<List<Integer>> combine(int n, int k) {
        
        List<List<Integer>> res = new ArrayList<>();
        
        if(k==0 || n==0)return res;
        
        for(int i=1;i<=n;i++){
            List<Integer> part = new ArrayList<>();
            part.add(i);
            helper(res, part, i+1, n, k);
        }
        
        return res;
    }
    
    public void helper(List<List<Integer>> res, List<Integer> part, int start, int n, int k){
        if(part.size() == k)
            res.add(new ArrayList<Integer>(part));
        
        if(start>n)return;
        
        for(int i = start;i<=n;i++){
            part.add(i);
            helper(res, part, i+1, n, k);
            part.remove(part.size()-1);
        }
    }
}
