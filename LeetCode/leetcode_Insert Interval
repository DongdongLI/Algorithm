/*
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10]. 
*/

/*
Pretty straightforward. But the most interesting part is to keep a Interval reverence temp to mark the new generated one.
*/


/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> insert(ArrayList<Interval> intervals, Interval newInterval) {
        ArrayList<Interval> result=new ArrayList<Interval>();
        boolean flag=false;
        Interval temp=newInterval;
		if(intervals==null)
		{
			intervals.add(newInterval);
			return intervals;
		}
		
		for(Interval i:intervals)
		{
			
			if(i.end<temp.start)
				result.add(i);
			else if(i.start>temp.end)
			{
				result.add(temp);
				temp=i;
			}
			else
			{
				temp=new Interval(Math.min(i.start, temp.start),Math.max(i.end, temp.end));
			}
		}
		result.add(temp);
		return result;
    }
}
