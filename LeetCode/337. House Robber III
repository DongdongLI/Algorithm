/*
  The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

  Determine the maximum amount of money the thief can rob tonight without alerting the police.

  Example 1:

  Input: [3,2,3,null,3,null,1]

       3
      / \
     2   3
      \   \ 
       3   1

  Output: 7 
  Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
  Example 2:

  Input: [3,4,5,1,3,null,1]

       3
      / \
     4   5
    / \   \ 
   1   3   1

  Output: 9
  Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.
*/

/*
  Naive solution
*/
class Solution {
    public int rob(TreeNode root) {
        if(root == null)
            return 0;
        // first, we decide to rob the node
        int res = root.val;
        // so the next available nodes are grandchildren nodes. Rob them
        if(root.left!=null){
            res+=rob(root.left.left);
            res+=rob(root.left.right);
        }
        if(root.right!=null){
            res+=rob(root.right.left);
            res+=rob(root.right.right);
        }
        // now, try to compare this to the amount of start robbing on the children node
        return Math.max(res, rob(root.left)+rob(root.right));
    }
}

/*
  Stored the calculated results in a map to avoid repeating the calculation.
*/
class Solution {
    public int rob(TreeNode root){
        Map<TreeNode, Integer> map = new HashMap<>();
        return robAndMemorize(root, map);
    }
    
    public int robAndMemorize(TreeNode root, Map<TreeNode, Integer> map) {
        if(root == null)
            return 0;
        // if we have done the calculation before, return it directly
        if(map.containsKey(root))return map.get(root);
        int res = root.val;
        if(root.left!=null){
            res+=robAndMemorize(root.left.left, map);
            res+=robAndMemorize(root.left.right, map);
        }
        if(root.right!=null){
            res+=robAndMemorize(root.right.left, map);
            res+=robAndMemorize(root.right.right, map);
        }
        // store the result in the map for future usage
        map.put(root, Math.max(res, robAndMemorize(root.left, map)+robAndMemorize(root.right, map)));
        return map.get(root);
    }
}

/*
  Greedy solution:
  the decision to be made at every node is: wether to rob this node or not.
  res[0] represents the result of not robbing current node, while res[1] represents the other one
  
  for root,
  if not robbed, its maximum amount is the "max of left child" plus "max of right child"
  if robbed, then the two child nodes can NOT be robbed, there for the maximum amount is
    root.val + left[0](amount which the node is not robbed) + right[0]
*/

class Solution {
    public int rob(TreeNode root) {
        int[] res = helper(root);
        return Math.max(res[0], res[1]);
    }
    
    public int[] helper(TreeNode root) {
        int[] res = new int[2];
        if(root == null)
            return res;
        
        int[] left = helper(root.left);
        int[] right = helper(root.right);
        // res[0] is not robbing root
        res[0] = Math.max(left[0], left[1])+Math.max(right[0], right[1]);
        // res[1] is robbing root
        res[1] = root.val+left[0]+right[0];
        
        return res;
    }
}
