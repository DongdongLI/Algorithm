/*
  Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

  For example:
  
  Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].
  
  Note:
  The order of the result is not important. So in the above example, [5, 3] is also correct.
  Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

*/
/*
  Idea: (still confused)
    Two runs:
    
    diff&= -diff; is very important
    
    for those numbers appear exactly twice, they can be divided to two group,
    
      
*/
public class Solution {
	public int[] singleNumber(int[] nums) {
		int diff=0;
		for(int i:nums){
			diff^=i;
		}

		//System.out.println(Integer.toBinaryString(diff));
		//System.out.println(Integer.toBinaryString(-diff));
		diff&=-diff;
		//System.out.println(Integer.toBinaryString(diff));
		int[] result={0,0};
		for(int i:nums){
			if((i&diff)==0){
				result[1]^=i;
			}else
				result[0]^=i;
		}
		return result;
	}
}
