/*
    Given two words (beginWord and endWord), and a dictionary, find the length of shortest transformation sequence from beginWord to endWord, such that:

    Only one letter can be changed at a time
    Each intermediate word must exist in the dictionary
    For example,
    
    Given:
    start = "hit"
    end = "cog"
    dict = ["hot","dot","dog","lot","log"]
    As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
    return its length 5.
    
    Note:
    Return 0 if there is no such transformation sequence.
    All words have the same length.
    All words contain only lowercase alphabetic characters.
*/

/*
    BFS: but how to gurantee the result is the shortest?
    
    It gurantees that by try to make the shortest tranform (start from the first letter)
*/

public class Solution {
	public int ladderLength(String beginWord, String endWord,
			Set<String> wordDict) {
			// store the partial result
		LinkedList<WordNode> queue = new LinkedList<WordNode>();
		// beginning: the beginword
		queue.add(new WordNode(beginWord, 1));
		wordDict.add(endWord);

		while (!queue.isEmpty()) {
			WordNode temp = queue.remove();
			
			if (temp.word.equals(endWord)) {
				return temp.steps;
			}
      // take the top element apart;
			char[] token = temp.word.toCharArray();
			for (int i = 0; i < token.length; i++) {
        // start from the first letter, try different ones, (first change the first letter, then second...
				for (char c = 'a'; c <= 'z'; c++) {
					char t = token[i];
					if (token[i] != c)
						token[i] = c;

					String newWord = new String(token);
					// try to see if the new assemble word is in the dict
					// if it is, put it in
					if (wordDict.contains(newWord)) {
						wordDict.remove(newWord);
						queue.add(new WordNode(newWord, temp.steps + 1));
					}
					// restore it
					token[i] = t;
				}
			}

		}
		return 0;
	}
}
// used to help with the search, it contains the word string itself, and the steps it takes to transform from begin word
class WordNode {
	String word;
	int steps;

	public WordNode(String word, int steps) {
		this.word = word;
		this.steps = steps;
	}
}

/*
	2018/03/28: cleaner code:
	start from the begin word, find its next possible words(only change one char) among the wordList,
		if end word is in it. found, return level number
		
		push all these next possible words into the queue, do the same for each one of them
*/
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
        Queue<String> queue = new LinkedList<>();
        
        queue.add(beginWord);
        
        Set<String> wordListSet = new HashSet<>();
        for(String str: wordList)
            wordListSet.add(str);
        
        int level = 1;
        
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int i=0;i<size;i++) {
                String word = queue.poll();
                if(word.equals(endWord))
                    return level;
                
                Set<String> possible = possibleNextWord(word, wordListSet);
                for(String str: possible){
                    queue.offer(str);                   
                }
            }
            level++;
        }
        return 0;
    }
    
    public Set<String> possibleNextWord(String word, Set<String> wordListSet) {
        
        Set<String> res = new HashSet<>();
        
        char[] charArr = word.toCharArray();
        
        for(int i=0;i<charArr.length;i++) {
            char old = charArr[i];
            for(char c = 'a';c<='z';c++){
                if(c == old)continue;
                
                charArr[i] = c;
                String temp = new String(charArr);
                if(wordListSet.contains(temp)){
                    wordListSet.remove(temp);
                    res.add(temp);
                }
                charArr[i] = old;
            }
        }
        return res;
    }
}
