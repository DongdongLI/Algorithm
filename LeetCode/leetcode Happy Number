/*
    Write an algorithm to determine if a number is "happy".

    A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.
    
    Example: 19 is a happy number
    
    1^2 + 9^2 = 82
    8^2 + 2^2 = 68
    6^2 + 8^2 = 100
    1^2 + 0^2 + 0^2 = 1
*/

/*
    Consists of two parts:
      Use the hashmap to check if it has gone into the loop
      
      Calculate the square sum
*/

public class Solution {
    public boolean isHappy(int n) {
        HashMap<Integer, Boolean> map=new HashMap<>();
        int sum=returnSquareSum(n);
        
        while(sum!=1){
        	if(!map.containsKey(sum)){
        		map.put(sum, true);
        		sum=returnSquareSum(sum);
        	}else{
        		return false;
        	}
        }
        return true;
    }
    public int returnSquareSum(int n){
    	int sum=0;
    	while(n!=0){
    		sum+=Math.pow(n%10, 2);
    		n=n/10;
    	}
    	return sum;
    }
}
