/*
  Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

  Example:

  Input: The root of a Binary Search Tree like this:
                5
              /   \
             2     13

  Output: The root of a Greater Tree like this:
               18
              /   \
            20     13
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int biggerSum = 0;
    public TreeNode convertBST(TreeNode root) {
        if(root == null)
            return root;
        
        convert(root);
        
        return root;
    }
    
    public void convert(TreeNode node) {
        if(node==null)
            return;
        
        convert(node.right);
        
        // for inorder traverse (left->middle->right), we get a accending result
        // with reversed inorder, it would be descending, so the sum of the earlier elements will be added
        // to the latter elements. So we use biggerSum to keep the earlier elements' sum
        
        node.val += biggerSum;
        biggerSum = node.val;
        
        convert(node.left);
    }
}
