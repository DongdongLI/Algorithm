/*
  Given an integer, convert it to a roman numeral.

  Input is guaranteed to be within the range from 1 to 3999.
*/

public class Solution {
	public String intToRoman(int num) {
		Map<Integer, String> map=new HashMap<Integer, String>();
		map.put(1000,"M");
        map.put( 900,"CM");
        map.put( 500,"D");
        map.put( 400,"CD");
        map.put( 100,"C");
        map.put( 90,"XC");
        map.put( 50,"L");
        map.put( 40,"XL");
        map.put( 10,"X");
        map.put( 9,"IX");
        map.put( 5,"V");
        map.put( 4,"IV");
        map.put( 1,"I");
        
        int[] devider={1000,900,500,400,100,90,50,40,10,9,5,4,1};
        int index=0;
        
        StringBuffer res=new StringBuffer();
        
        for(int i=0;i<devider.length;i++){
        	while(num>=devider[i]){
        		res.append(map.get(devider[i]));
        		num-=devider[i];
        	}
        }
        
        return res.toString();
	}
}

//2015/10/21: no clue at first because I forgot how to convert Integer to Roman number. Later I figure it out
/* slightly different version of the for loop
  for(int i=0;i<devider.length;i++){
        	int t=num/devider[i];
        	if(t!=0){
        		for(int j=0;j<t;j++)
        			res.append(map.get(devider[i]));
        		num%=devider[i];
        	}
        }
*/
