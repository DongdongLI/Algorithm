/*
 Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:

    All numbers (including target) will be positive integers.
    Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
    The solution set must not contain duplicate combinations.

For example, given candidate set 2,3,6,7 and target 7,
A solution set is:
[7]
[2, 2, 3] 
*/

/*
Remember that one number can be used as many times as possible

So, at each recursion, no need to pass "index+1"
*/
public class Solution {
    public ArrayList<ArrayList<Integer>> combinationSum(int[] candidates, int target) {
    
        ArrayList<ArrayList<Integer>> result= new ArrayList<ArrayList<Integer>>();
        if(candidates==null || candidates.length==0)
        	return result;
        Arrays.sort(candidates);
        ArrayList<Integer> temp=new ArrayList<Integer>();
        help(candidates,0,target,temp,result);
        return result;
    }
	public void help(int[] candidates,int index,int target,ArrayList<Integer> temp,ArrayList<ArrayList<Integer>> result)
	{
		if(target<0 )
		{
			return;
		}
		
		
		if(target==0)
		{
			result.add(new ArrayList<Integer>(temp));
			return;
		}
			
		
		for(int i=index;i<candidates.length;i++)
		{
			if(i>index && candidates[i]==candidates[i-1])continue;
			temp.add(candidates[i]);
			help(candidates, i, target-candidates[i], temp, result);
			temp.remove(temp.size()-1);
		}
}
}
//2015/12/20: made some effort and finished.
