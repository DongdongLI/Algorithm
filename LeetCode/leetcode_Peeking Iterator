/*
    Given an Iterator class interface with methods: next() and hasNext(), design and implement a PeekingIterator that 
    support the peek() operation -- it essentially peek() at the element that will be returned by the next call to next().

    Here is an example. Assume that the iterator is initialized to the beginning of the list: [1, 2, 3].
    
    Call next() gets you 1, the first element in the list.
    
    Now you call peek() and it returns 2, the next element. Calling next() after that still return 2.
    
    You call next() the final time and it returns 3, the last element. Calling hasNext() after that should return false.
*/

/*
    for the sake of peek(), we have to save the next element in the iterator
    "next" is the next element: always pop the top element out and get ready
    
*/

// Java Iterator interface reference:
// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html
class PeekingIterator implements Iterator<Integer> {

	Iterator<Integer> mIterator;
	Integer next=null; // the actual element that will be peeked and return next
	public PeekingIterator(Iterator<Integer> iterator) {
	    // initialize any member here.
	    mIterator=iterator;
	    if(mIterator.hasNext())
	    	next=mIterator.next();
	}

    // Returns the next element in the iteration without advancing the iterator.
	public Integer peek() {
		if(next!=null)
			return next;
        return null;
	}

	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	@Override
	public Integer next() {
		int temp=next;
		next= mIterator.hasNext()? mIterator.next():null; // update the "next" whith next value, return temp
	    return temp;
	}

	@Override
	public boolean hasNext() { // do not use hasNext() directly. Since the last element may lying in "next" at this moment
	    return next!=null; 
	}
}
