/*
    Given two strings s and t, determine if they are isomorphic.

    Two strings are isomorphic if the characters in s can be replaced to get t.
    
    All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.
    
    For example,
    Given "egg", "add", return true.
    
    Given "foo", "bar", return false.
    
    Given "paper", "title", return true.
    
    Note:
    You may assume both s and t have the same length.
*/

/*
    Use two HashMaps to memorize how the chars in s is mapped, AND what chars is mapped to the chars in t 
*/

public class Solution {
    public boolean isIsomorphic(String s, String t) {
    	char[] ss=s.toCharArray();
    	char[] tt=t.toCharArray();
    	HashMap<Character, Character> sTOt=new HashMap<Character, Character>();
    	HashMap<Character, Character> tTOs=new HashMap<Character, Character>();
    	
    	for(int i=0;i<ss.length;i++){
    		if(!sTOt.containsKey(ss[i])){
    		
    			if(!tTOs.containsKey(tt[i])){
    			
    				sTOt.put(ss[i], tt[i]);
    				tTOs.put(tt[i], ss[i]);
    			}
    			else
    				return false;
    		}else{
    			if(!tTOs.containsKey(tt[i]))return false;
    			
    			if(!(sTOt.get(ss[i])==tt[i] && tTOs.get(tt[i])==ss[i]))
    				return false;
    		}
    	}
    	return true;
    }
}
//2015/12/24: nail it, long gone.
public class Solution {
    public boolean isIsomorphic(String s, String t) {
        Map<Character, Character> charMap=new HashMap<>();
		for(int i=0;i<s.length();i++){
			if(!charMap.containsKey(s.charAt(i))){
				if(charMap.containsValue(t.charAt(i)))return false; // something else has mapped to this character already. false
				charMap.put(s.charAt(i), t.charAt(i));
			}else{
				if(charMap.get(s.charAt(i))!=t.charAt(i))return false; // The char in s has mapped to something, but not equal to this char in t. false
			}
		}
		return true;
    }
}
