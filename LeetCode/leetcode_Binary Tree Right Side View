/*
  Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered 
  from top to bottom.

  For example:
  Given the following binary tree,
     1            <---
   /   \
  2     3         <---
   \     \
    5     4       <---
  You should return [1, 3, 4].
*/

/*
    Trivial Solution:
      If look at a binary tree from the right side, we will see the last node of each level. So we traverse the nodes level by 
      level, and record the "val" of the last node of each level
*/

public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res=new LinkedList<Integer>();
        if(root==null)
        	return res;
        //last row
        List<TreeNode> prev=new LinkedList<TreeNode>();
        List<TreeNode> curr=new LinkedList<TreeNode>();// this row
        
        prev.add(root);
        while(!prev.isEmpty()){
        	res.add(prev.get(prev.size()-1).val);
        	for(TreeNode node:prev){// send their children into the list
        		if(node.left!=null)
        			curr.add(node.left);
        		if(node.right!=null)
        			curr.add(node.right);
        	}
        	prev.clear();
        	prev.addAll(curr);
        	curr.clear();
        }
        return res;
    }
}
/*
  Yet another smart idea:
    1. Since we only take the last node of each row, so the size of the result set should be the same as the depth of the tree
    2. If let it goes down it self, the right path is among the longest path.
*/

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null)return res;
        helper(root, 0, res);
        return res;
    }
    
    public void helper(TreeNode root, int depth, List<Integer> res){
        if(root==null)
            return;
        // this means that res has one node for the previous levels, need one for this level
        if(depth == res.size())
            res.add(root.val);
        helper(root.right, depth+1, res);// this will make sure if there a right node it will be added first
        helper(root.left, depth+1, res);// if the right one is added then the left one will be ignored. because by then depth<res.size
    }
}

//2016/1/9: totally forgot. need refresh
//new understanding:

        if(res.size()==depth )
            res.add(node.val);
        help(res,depth+1,node.right);
        help(res,depth+1,node.left);
      
for example 1
           / \
          2   3
          
  (root,0,[]) so 1 get added
  (3,1,[1]), so 3 is added
  (2,1,[1,3]) . depth!=size. so 2 will not be added
  
  This can make sure that only when the right sub-tree is empty then the left half will be looked in to.
