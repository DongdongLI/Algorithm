/*
  There are N network nodes, labelled 1 to N.

  Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.

  Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

  Note:
  N will be in the range [1, 100].
  K will be in the range [1, N].
  The length of times will be in the range [1, 6000].
  All edges times[i] = (u, v, w) will have 1 <= u, v <= N and 1 <= w <= 100.
*/

// extremely slow
class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        // map: start -> end -> time
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();
        for(int[] time: times) {
            if(!map.containsKey(time[0]))
                map.put(time[0], new HashMap<>());
            map.get(time[0]).put(time[1], time[2]);
        }
        
        int[] reachTime = new int[N];
        for(int i=0;i<N;i++) {
            reachTime[i] = -1;
        }
        
        reachTime[K-1] = 0;
        dfs(map, K, reachTime);
        
        int max = Integer.MIN_VALUE;
        
        for(int i=0;i<N;i++) {
            if(reachTime[i] == -1)
                return -1;
            max = Math.max(max, reachTime[i]);
        }
        
        return max;
    }
    
    public void dfs(Map<Integer, Map<Integer, Integer>> map, int node, int[] reachTime) {
        if(!map.containsKey(node))
            return;
        
        Map<Integer, Integer> timeToTheNextNodes = map.get(node);
        for(Map.Entry<Integer, Integer> entry: timeToTheNextNodes.entrySet()) {
            // if the next point has not been visited OR we found a shorter route
            if(reachTime[entry.getKey()-1] == -1 || reachTime[node-1] + entry.getValue() < reachTime[entry.getKey() -1]) {
                reachTime[entry.getKey()-1] = reachTime[node-1] + entry.getValue();
                dfs(map, entry.getKey(), reachTime);
            }
        }
    }
}
