/*
  Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the 
  product of all the elements of nums except nums[i].

  Solve it without division and in O(n).
  
  For example, given [1,2,3,4], return [24,12,8,6].
  
  Follow up:
  Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose 
  of space complexity analysis.)
*/

/*only came up with the O(n^2) solution, but this is tricky*/
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] res = new int[nums.length];
        res[0] = 1;
        // first round: left to right: res[i], the product of all the elements to the left
        for(int i=1;i<res.length;i++){
            res[i] = nums[i-1]*res[i-1];
        }
        
        // at this point res[res.length-1] is already completed, because it has the product of all the elements to its left
        int temp = 1;
        // round 2, right to left, res[i] need to multiple elements from the right
        for(int i=res.length-1;i>=0;i--){
            res[i] = res[i]*temp;
            temp = temp*nums[i];
        }
        
        return res;
    }
}
