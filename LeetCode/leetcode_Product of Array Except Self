/*
  Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the 
  product of all the elements of nums except nums[i].

  Solve it without division and in O(n).
  
  For example, given [1,2,3,4], return [24,12,8,6].
  
  Follow up:
  Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose 
  of space complexity analysis.)
*/

/*only came up with the O(n^2) solution, but this is tricky*/

public class Solution {
    public int[] productExceptSelf(int[] nums) {
        
    	int[] res=new int[nums.length];
    	res[0]=1;
    	for(int i=1;i<res.length;i++){
    		res[i]=res[i-1]*nums[i-1]; // in this run, the last element is not consisder
       	}
    	
    	int right=1;
    	
    	for(int i=res.length-1;i>=0;i--){ // in this round, the first element is not considered
    		res[i]*=right;
    		right*=nums[i];
    	}
    	return res;
    }
}
/*
    
*/
// 2015/12/20: trick problem. almost entirely forgot. not worth for the time
