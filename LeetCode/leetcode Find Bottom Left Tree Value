/*
  Given a binary tree, find the leftmost value in the last row of the tree.

  Example 1:
  Input:

      2
     / \
    1   3

  Output:
  1
  Example 2: 
  Input:

          1
         / \
        2   3
       /   / \
      4   5   6
         /
        7

  Output:
  7
  Note: You may assume the tree (i.e., the given root node) is not NULL.
*/

/*
  better solution:
  breadth first search
    	For every node, put its right node in first
      So, the last node is guaranteed to be a left leaf
*/
public class Solution {
    
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList();
        queue.add(root);
        while(!queue.isEmpty() ){
            root = queue.poll();
            if(root.right!=null){
                queue.add(root.right);
            }
            if(root.left!=null){
                queue.add(root.left);
            }
        }
        return root.val;
    }
}

/*
  Better DFS
*/
class Solution {
    int maxDepth = Integer.MIN_VALUE;
    int val = 0;
    public int findBottomLeftValue(TreeNode root) {
        dfs(root, 0);
        return val;
    }
    
    public void dfs(TreeNode node, int depth) {
        if(node == null)
            return;
        // we are at new depth, which depth+1, update the depth
        if(depth+1 > maxDepth){
            maxDepth = depth+1;
            val = node.val;
        }
        
        dfs(node.left, depth+1);
        dfs(node.right, depth+1);
    }
}

/*
  Find nodes layer by layer, pull out the last layer and take the first element
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    int maxDepth = 1;
    
    public int findBottomLeftValue(TreeNode root) {
        Map<Integer, List<TreeNode>> levels = new HashMap();
        
        List<TreeNode> firstLayer = new LinkedList();
        firstLayer.add(root);
        
        levels.put(1, firstLayer);
        
        help(root.left, levels, 2);
        help(root.right, levels, 2);
        
        return levels.get(maxDepth).get(0).val;
    }
    
    public void help(TreeNode node, Map<Integer, List<TreeNode>> levels, int depth) {
        if(node==null)return;
        
        if(depth>maxDepth)maxDepth=depth;
        
        if(!levels.containsKey(depth)) {
            levels.put(depth, new LinkedList<TreeNode>() );
        }
        
        levels.get(depth).add(node);
        
        help(node.left, levels, depth+1);
        help(node.right, levels, depth+1);
    }
}
