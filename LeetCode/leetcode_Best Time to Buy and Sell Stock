/*
  Say you have an array for which the ith element is the price of a given stock on day i.

  If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), 
  design an algorithm to find the maximum profit.
*/

/*
    Idea:
      There will only be one transaction: one buy and one sell, so the profit depends on the difference of the prices of those
      two days
*/


public class Solution {
    public int maxProfit(int[] prices) {
        if(prices==null || prices.length<=1)
        	return 0;
      // track of the max profit
    	int max=0;
    	// track the lowest price
    	int min=Integer.MAX_VALUE;
    	for(int i=0;i<prices.length;i++)
    	{
    	  // update min price
    		min=Integer.min(min, prices[i]);
    		// if sell it today makes higher price
    		max=Integer.max(max,prices[i]-min); // always make sure the buy in price is the lowest
    	}
    	return max;
    }
}
