/*
  Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that 
  at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.
  
  Note:
  You must not modify the array (assume the array is read only).
  You must use only constant, O(1) extra space.
  Your runtime complexity should be less than O(n2).
  There is only one duplicate number in the array, but it could be repeated more than once.
*/

/*
    Binary search:
    Since the numbers are all between 1 and n,
    pick up mid=(1+n)/2, and count how many number are smaller than it.
    
    if it is more than mid, then the duplicate number is between (1,mid), or it will fall into (mid,n)
    
    so on and so fourth
*/

public class Solution {
    public int findDuplicate(int[] nums) {
        
    	int low=1;
    	int high=nums.length-1;
    	
    	while(low<high){
    		int mid=low+(high-low)/2;
    		int count=0;
    		for(int i:nums){
    			if(i<=mid)
    				count++;
    		}
    		if(count<=mid)
    			low=mid+1;
    		else
    			high=mid;
    	}
    	return low;
    }
}
