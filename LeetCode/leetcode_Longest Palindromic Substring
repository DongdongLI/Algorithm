/*
Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, 
and there exists one unique longest palindromic substring.
*/

/*
  2015/10/20
  Trivial is to try all the sub-string and test if they are palindromic, which turn out to be too slow.
  
  Instead, we start from each character and try to expand the substring as long as it could be palindromic
*/

public class Solution {
	
	StringBuffer longest=new StringBuffer();
	
    public String longestPalindrome(String s) {
    	if(s==null || s.length()<=1)
    		return s;
    	
    	for(int i=0;i<s.length();i++){
    		build(longest, i, i, s); // for those palindrome with odd length, 1,3,5...
    		build(longest,i,i+1,s); // for those palindrome with even length , 2,4,6...
    	}
    	return longest.toString();
    }
    
    public void build(StringBuffer longest,int i, int j,String s){
    	while(i>=0 && j<s.length()){ // the index is valid
    		if(s.charAt(i)==s.charAt(j)){ // if two of them match, then extend them
    			if(j-i+1 > longest.length()){ // new longest
    				longest.delete(0, longest.length()); // clean up
    				longest.append(s.subSequence(i, j+1)); // add the new substring
    			}
    			// update index
    			i--;
    			j++;
    		}else
    		    break; // watch out
    	}
    	
    }
    
}

/*
	Verbose DP:
	dp[i][j]: is substring from i to j a palindrome
*/

class Solution {
    public String longestPalindrome(String s) {
        String res = "";
        int max = Integer.MIN_VALUE;
        if(s==null || s.length()==0)
            return res;
        
        int len = s.length();
        boolean[][] dp = new boolean[len][len];
        
        for(int i=0;i<len;i++){
            dp[i][i] = true;
            max = 1;
            res = s.substring(i,i+1);
        }
        
        for(int i=len-2;i>=0;i--){
            for(int j=i+1;j<len;j++){
                if(j==i+1)
                    dp[i][j] = s.charAt(i)==s.charAt(j);
                else
                    dp[i][j] = dp[i+1][j-1]&&s.charAt(i)==s.charAt(j);
    
                if(dp[i][j] && max<j-i+1){
                    max = j-i+1;
                    res = s.substring(i,j+1);
                }
            }
        }
        
        return res;
    }
}
