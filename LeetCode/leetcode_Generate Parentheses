
/*
 Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"


*/
/*Ideas:
DFS is quite obvious.
All of the invalid parentheses have one common similarity: at a moment of forming it, the number of remaining ( is larger than ).
For example "())". So if we can take them out we will be fine.
*/


public class Solution {
    public ArrayList<String> generateParenthesis(int n) {
        ArrayList<String> result=new ArrayList<String>();
        if(n<=0)return result;
        String temp="";
        DFS(n, n, result, temp);
        return result;
    }
	
	public void DFS(int left,int right,ArrayList<String> result,String temp)
	{
		if(left>right)return;
		if(left==0 && right==0)
		{
			result.add(new String(temp));
		}
		if(left>0)
			DFS(left-1, right, result, temp+"(");
		if(right>0)
			DFS(left,right-1,result,temp+")");
	}
}

// 8/26/2015 review (pass the test in one time, writing almost the same code)
//2015/10/23 nail it

//2016/1/4 nail it.
/*
	Back-tracking
*/
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        
        if(n==0)
            return res;
        
        StringBuilder partial = new StringBuilder();
        partial.append("(");
        build(n-1, n, partial, res);
        
        return res;
    }
    
    public void build(int left, int right, StringBuilder partial, List<String> res){
        if(left==right && left == 0){
            res.add(partial.toString());
            return;
        }
        
        if(left>right)
            return;
        
        if(left>0){
            partial.append("(");
            build(left-1, right, partial, res);
            partial.deleteCharAt(partial.length()-1);
        }
        if(right>0){
            partial.append(")");
            build(left, right-1, partial, res);
            partial.deleteCharAt(partial.length()-1);
        }    
    }
}
