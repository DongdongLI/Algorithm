/*
  Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

  For example, given the array [2,3,1,2,4,3] and s = 7,
  the subarray [4,3] has the minimal length under the problem constraint.
*/
// O(N) solution: two pointers
public class Solution {
	public int minSubArrayLen(int s, int[] nums){
		if(nums==null || nums.length==0)
			return 0;
		// left pointer
		int p=0;
		int sum=nums[0];
		int result=nums.length;
		// right pointer
		for(int q=0;q<nums.length;){
			if(p==q)// only one digit
				if(nums[p]>=s) // and large enough
					return 1;
				else{ // not large enough, add one
					q++;
					if(q<nums.length)
						sum+=nums[q];
					else
						return result;
				}
			else{ // few digits
				if(sum>=s){ // large enough
					result=Math.min(q-p+1, result);// update result
					sum-=nums[p++]; // try to make it shorter
				}else{
					q++; // few digits but too small
					if(q<nums.length){ // still have chances
						sum+=nums[q]; // add
					}else{ // no more digits
						if(p==0) // it means impossible
							return 0; 
						else{ // p is not 0 means there are valid result already
							return result;
						}
					}
					
				}
			}
		}
		return result;
	}
}
//o(nlogn)
// divide and conquer

//2015/12/15: almost forgot.
