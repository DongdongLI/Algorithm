/*
  Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

  get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
  put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

  Follow up:
  Could you do both operations in O(1) time complexity?

  Example:

  LRUCache cache = new LRUCache( 2 /* capacity */ );

  cache.put(1, 1);
  cache.put(2, 2);
  cache.get(1);       // returns 1
  cache.put(3, 3);    // evicts key 2
  cache.get(2);       // returns -1 (not found)
  cache.put(4, 4);    // evicts key 1
  cache.get(1);       // returns -1 (not found)
  cache.get(3);       // returns 3
  cache.get(4);       // returns 4
*/
/*
  Very basic solution:
  Use map to keep the pairs
  Use a link list to remember the order of cache usage
*/

class LRUCache {

    private Map<Integer, Integer> map;
    int capacity;
    Node history;
    Node head;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<>();
        
        head = null;
    }
    
    public int get(int key) {
        if(!map.containsKey(key))
            return -1;
        
        // if it is the head, do nothing
        
        // if not, move the node up front
        if(head.key != key){
            Node i = head;
            while(i.next != null && i.next.key != key)
                i = i.next;
            
            Node next = i.next.next;
            Node theKeyGetRead = i.next;
            
            i.next = next;
            theKeyGetRead.next = head;
            
            head = theKeyGetRead;
                        
        }
        return map.get(key);
    }
    
    public void put(int key, int value) {
        
        if(head == null){
            head = new Node(key);
            map.put(key,value);
        }
        else{
            if(!map.containsKey(key)){
                map.put(key,value);
                Node node = new Node(key);
                node.next = head;
                head = node;
            }
            else{
                map.put(key,value);
                
                if(head.next == null)//only one cache
                    return;
                
                if(head.key != key){ // if the first one is this key, do nothing
                    Node i = head;
                    while(i.next.key != key)
                        i = i.next;

                    Node next = i.next.next;
                    Node theKeyGetRead = i.next;

                    i.next = next;
                    theKeyGetRead.next = head;

                    head = theKeyGetRead;

                }
            }
        }
        if(map.size() > capacity){
            Node i = head;
            while(i.next.next != null)
                i = i.next;
            
            map.remove(i.next.key);
            
            i.next = null;
        }
    }
        
    class Node {
        int key;
        Node prev;
        Node next;
        Node(int keyVal){
            key = keyVal;
            prev = null;
            next = null;
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
