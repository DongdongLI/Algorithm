/*
  Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.

  For example,
  Given n = 3, your program should return all 5 unique BST's shown below.
  
     1         3     3      2      1
      \       /     /      / \      \
       3     2     1      1   3      2
      /     /       \                 \
     2     1         2                 3
*/

/*
  This time we need to construct them
  
  There are 1 to n, n numbers, and we can choose anyone of them to be the node
  (1...i-1) is the left sub-tree, i is the node, (i+1,n) is the right sub-tree
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<TreeNode> generateTrees(int n) {
        if(n==0)return new ArrayList<TreeNode>();
		return gen(1,n);
    }
	public List<TreeNode> gen(int start,int end){
		List<TreeNode> list=new ArrayList<>();
		if(start>end){
			list.add(null);
			return list;
		}else if(start==end){
			list.add(new TreeNode(start));
			return list;
		}else{
		  //generate the children recursively
			List<TreeNode> left,right;
			for(int i=start;i<=end;i++){
				left=gen(start,i-1);
				right=gen(i+1,end);
				for(TreeNode n:left){
					for(TreeNode m:right){
						TreeNode root=new TreeNode(i);
						root.left=n;
						root.right=m;
						list.add(root);
					}
				}
			}
		}
		return list;
	}
}
