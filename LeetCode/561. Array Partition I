/*
  Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.

  Example 1:
  Input: [1,4,3,2]

  Output: 4
  Explanation: n is 2, and the maximum sum of pairs is 4.
  Note:
  n is a positive integer, which is in the range of [1, 10000].
  All the integers in the array will be in the range of [-10000, 10000].
*/

/*
  After playing with [1 2 3 4 5 6 7 8 9 10]
  
   the worst outcome will be 1,10  2,9  3,8  4,7  5,6, then all the large numbers were useless.
   
   to save some of them, sort them first, then team up 9,10  7,8  5,6..
*/

/*
  When you really think about it, you realize the solution is dead simple...
*/

public class Solution {
    public int arrayPairSum(int[] nums) {
        
        // basically according to the online judge, my insertion sort is too damn slow
        
        // for(int i=1;i<nums.length;i++){
        //     for(int j=i;j>0;j--){
        //         if(nums[j]<nums[j-1]){
        //             int temp = nums[j];
        //             nums[j] = nums[j-1];
        //             nums[j-1] = temp;
        //         }
        //     }
        // }
        
        Arrays.sort(nums);
        
        int res = 0;
        
        for(int i=0;i<nums.length;i=i+2){
            res+=nums[i];
        }
        
        return res;
    }
}
