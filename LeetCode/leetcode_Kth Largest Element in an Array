/*
  Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, 
  not the kth distinct element.

  For example,
  Given [3,2,1,5,6,4] and k = 2, return 5.
  
  Note: 
  You may assume k is always valid, 1 ≤ k ≤ array's length.
*/

/*
  The most appropriate method is to use the partition() step in quicksort algorithm.
  
  partition() will reorder the given array based on the value of the pivot, and the smaller ones will be on the left while the
  larger ones are on the right
*/

public class Solution {
    public int findKthLargest(int[] nums, int k) {
        k=nums.length-k; // the actual index after sorting
        
        int left=0;
        int right=nums.length-1;
        while(left<right){
        	int p=partition(nums, left, right); // check the index
        	if(p<k){
        		left=p+1;
        	}else if(p>k){
        		right=p-1;
        	}
        	else
        		break;
        }
        return nums[k];
    }
    
    public int partition(int[] a,int l,int r)
	{
		int p=r;
		int j;
		int i=l-1; // i is the index of the last element whose value is smaller or equal than the pivot
		for(j=l;j<r;j++){ // j is the index of the first element whose value is larger than pivot
			if(a[j]<=a[p]){
				i++;
				int tmp=a[i];
				a[i]=a[j];
				a[j]=tmp;
			}
		}
		int tmp=a[i+1]; // put the pivot in the position it belongs to
		a[i+1]=a[p];
		a[p]=tmp;
		
		return i+1;
	}
}
