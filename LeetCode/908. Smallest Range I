/*
  Given an array A of integers, for each integer A[i] we may choose any x with -K <= x <= K, and add x to A[i].

  After this process, we have some array B.

  Return the smallest possible difference between the maximum value of B and the minimum value of B.



  Example 1:

  Input: A = [1], K = 0
  Output: 0
  Explanation: B = [1]
  Example 2:

  Input: A = [0,10], K = 2
  Output: 6
  Explanation: B = [2,8]
  Example 3:

  Input: A = [1,3,6], K = 3
  Output: 0
  Explanation: B = [3,3,3] or B = [4,4,4]


  Note:

  1 <= A.length <= 10000
  0 <= A[i] <= 10000
  0 <= K <= 10000
*/

/*
	Example:
	Min 0, max 80, k 20
		Best can be done is to bump min to 20, bump max to 60
		Which is diff-2*20
	
	Min 0, max 10, K 4
		Diff - 2*4
		
	If diff is less than 2* k, min range is 0
	
*/

class Solution {
    public int smallestRangeI(int[] A, int K) {
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        
        for(int i=0;i<A.length;i++){
            if(max<A[i])
                max = A[i];
            if(min>A[i])
                min = A[i];
        }
        
        if(max == min)return 0;
        
        int diff = max - min;
        if(K==0)return diff;
        if(diff<=2*K)
            return 0;
        else
            return diff-2*K;
    }
}
