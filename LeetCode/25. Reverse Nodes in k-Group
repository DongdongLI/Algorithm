/*
  Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

  k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

  Example:

  Given this linked list: 1->2->3->4->5

  For k = 2, you should return: 2->1->4->3->5

  For k = 3, you should return: 3->2->1->4->5

  Note:

  Only constant extra memory is allowed.
  You may not alter the values in the list's nodes, only nodes itself may be changed.
*/

// faster then ever

class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head == null || head.next == null)
            return head;
        
        ListNode dummy = new ListNode(-9);
        dummy.next = head;
        
        // pre is the end of the part of the list that is done updated.
        ListNode pre = dummy;
        ListNode cur = dummy.next;
        
        int count = 0;
        while(cur != null) {
            count++;
            ListNode next = cur.next;
            // find k nodes in a row
            if(count == k) {
                // cut the list after cur, since we don't want to reverse the rest
                cur.next = null;
                pre.next = reverse(pre.next);
                // move pre to the new start, which is the end of these k nodes
                for(int i=0;i<k;i++) {
                    pre = pre.next;
                }
                count=0;
                if(pre == null) break;
                // reconnect
                pre.next = next;
                cur = pre.next;
            }
            else
                cur = next;
        }
        
        return dummy.next;
    }
    // a subroutine to reverse a linked list start at head
    private ListNode reverse(ListNode head) {
        if(head == null || head.next == null)
            return head;
        
        ListNode prev = head;
        ListNode cur = head.next;
        
        while(cur != null) {
            ListNode next = cur.next;
            cur.next = prev;
            
            prev = cur;
            
            cur = next;
        }
        
        head.next = null;
        return prev;
    }
}
