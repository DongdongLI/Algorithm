/*
  Given a square array of integers A, we want the minimum sum of a falling path through A.

  A falling path starts at any element in the first row, and chooses one element from each row.  The next row's choice must be in a column that is different from the previous row's column by at most one.



  Example 1:

  Input: [[1,2,3],[4,5,6],[7,8,9]]
  Output: 12
  Explanation: 
  The possible falling paths are:
  [1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]
  [2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]
  [3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]
  The falling path with the smallest sum is [1,4,7], so the answer is 12.



  Note:

  1 <= A.length == A[0].length <= 100
  -100 <= A[i][j] <= 100
*/

class Solution {
    public int minFallingPathSum(int[][] A) {
        if(A.length==1)return A[0][0];
        int[][] dp = new int[A.length][A.length];
        int min = Integer.MAX_VALUE;
        // start from the bottom row, their falling path sum is themselves
        for(int i=A.length-1;i>=0;i--) {
            for(int j=0;j<A[0].length;j++)
            if(i==A.length-1)
                dp[i][j] = A[i][j];
            else{
                if(j==0)
                    dp[i][j] = A[i][j] + Math.min(dp[i+1][j], dp[i+1][j+1]);
                else if(j==A.length-1)
                    dp[i][j] = A[i][j] + Math.min(dp[i+1][j], dp[i+1][j-1]);
                // choose between at most 3 options for the smallest
                else
                    dp[i][j] = A[i][j] + Math.min(dp[i+1][j], Math.min(dp[i+1][j+1], dp[i+1][j-1]));
                
                if(i==0)
                    min = Math.min(min, dp[i][j]);
            }
        }
        
        return min;
    }
}
