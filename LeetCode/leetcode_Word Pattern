/*
  Given a pattern and a string str, find if str follows the same pattern.

  Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.
  
  Examples:
  pattern = "abba", str = "dog cat cat dog" should return true.
  pattern = "abba", str = "dog cat cat fish" should return false.
  pattern = "aaaa", str = "dog cat cat dog" should return false.
  pattern = "abba", str = "dog dog dog dog" should return false.
  Notes:
  You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.
*/

public class Solution {
    public boolean wordPattern(String pattern, String str) {
        String[] words=str.split(" ");
        
         if(words.length!=pattern.length())
        	return false;
        
        int i=0;
        // save the char and the index
        HashMap<Character, Integer> pat=new HashMap<>();
        // save the String and the index
        HashMap<String, Integer> strm=new HashMap<>();
        
        while(i<pattern.length()){
        	char t=pattern.charAt(i);
        	// the order of meeting new word should exactly follow the pattern, if the order is incorrenct or if the word is wrong. false
        	if(!pat.containsKey(t)){
        		pat.put(t, i);
        		if(strm.containsKey(words[i]))
        			return false;
        		strm.put(words[i], i);
        		i++;
        	}else{
        		int index=pat.get(t);
        		if(!strm.containsKey(words[i]))
        			return false;
        		
        		if(!(strm.get(words[i])==index))
        			return false;
        		i++;
        	}
        }
        return true;
    }
}
/*
  cleaner code 
*/

class Solution {
    public boolean wordPattern(String pattern, String str) {
        if(pattern == null || pattern.length() == 0 || str == null || str.length() == 0)
            return false;
        
        Map<Character, String> map = new HashMap<>();
        Set<String> mapped = new HashSet<>();
        
        char[] chars = pattern.toCharArray();
        String[] arr = str.split(" ");
        
        if(chars.length != arr.length)
            return false;
        
        for(int i=0;i<arr.length;i++){
            if(map.containsKey(chars[i])){
                if( !map.get(chars[i]).equals(arr[i]) )
                    return false;
            }
            else{
                if(mapped.contains(arr[i]))
                    return false;
                else{
                    mapped.add(arr[i]);
                    map.put(chars[i], arr[i]);
                }
                    
            }
        }
        
        return true;
    }
}
/*
  Super concise version: put(Key, Value) return previous value...
  keep an eye on Integer
*/
class Solution {
    public boolean wordPattern(String pattern, String str) {
        if(pattern == null || pattern.length() == 0 || str == null || str.length() == 0)
            return false;
        
        Map<Object, Integer> map = new HashMap<>();
        
        char[] chars = pattern.toCharArray();
        String[] arr = str.split(" ");
        
        if(chars.length != arr.length)
            return false;
        
        for(Integer i=0;i<arr.length;i++){
            if(map.put(chars[i], i) != map.put(arr[i], i) )
                return false;
        }
        
        return true;
    }
}
