/*
Given a list of words and two words word1 and word2, return the shortest distance between these two words in the list.

For example,
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].

Given word1 = “coding”, word2 = “practice”, return 3.
Given word1 = "makes", word2 = "coding", return 1.

Note:
You may assume that word1 does not equal to word2, and word1 and word2 are both in the list.
*/

/*
  Solution 1: Brute force
*/

class Solution {
    public int shortestDistance(String[] words, String word1, String word2) {
        Map<String, List<Integer>> map = new HashMap<>();
        //keep all the indices for each word
        for(int i=0;i<words.length;i++){
            if(!map.containsKey(words[i]))
                map.put(words[i], new ArrayList<>());
            
            map.get(words[i]).add(i);
        }
        // find the index of those two words
        List<Integer> index1 = map.get(word1);
        List<Integer> index2 = map.get(word2);
        // use brute force to find the shortest distance
        if(index1.get(index1.size() -1 ) <index2.get(0))
            return index2.get(0) - index1.get(index1.size() -1 );
        else if(index1.get(0) > index2.get(index2.size() -1))
           return index1.get(0) - index2.get(index2.size() -1);
        else{
            int min = Integer.MAX_VALUE;
            for(int i=0;i<index1.size();i++){
                for(int j=0;j<index2.size();j++){
                    min = Math.min(min, Math.abs(index1.get(i) - index2.get(j)));
                    if(min == 1)
                        return min;
                }
            }
            
            return min;
        }
    }
}

/*
  Compare more wisely
*/
class Solution {
    public int shortestDistance(String[] words, String word1, String word2) {
        List<Integer> index1 = new ArrayList<>();
        List<Integer> index2 = new ArrayList<>();
        
        for(int i=0;i<words.length;i++){
            if(words[i].equals(word1))
                index1.add(i);
            else if(words[i].equals(word2))
                index2.add(i);
        }
        
        int p1=0, p2=0;
        int min = Integer.MAX_VALUE;
        while(p1<index1.size() && p2<index2.size()){
            min = Math.min( min, Math.abs(index1.get(p1) - index2.get(p2)  ) );
            // always move the smaller cursor, so they get closer
            if( index1.get(p1) < index2.get(p2) )
                p1++;
            else
                p2++;
        }
        
        return min;
    }
}
