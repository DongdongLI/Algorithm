/*
  Given a roman numeral, convert it to an integer.

  Input is guaranteed to be within the range from 1 to 3999.
*/

/*
	subtractive notation is often used as follows:

	I placed before V or X indicates one less, so four is IV (one less than 5) and 9 is IX (one less than 10).
	X placed before L or C indicates ten less, so forty is XL (10 less than 50) and 90 is XC (ten less than a hundred).
	C placed before D or M indicates a hundred less, so four hundred is CD (a hundred less than five hundred) and nine hundred is CM (a hundred less than a thousand).
*/

class Solution {
    public int romanToInt(String s) {
        int res = 0;
        
        Map<Character, Integer> map = new HashMap<>();
        map.put('I',1);
        map.put('V',5);
        map.put('X',10);
        map.put('L',50);
        map.put('C',100);
        map.put('D',500);
        map.put('M',1000);
        
        char[] arr = s.toCharArray();
        for(int i=0;i<arr.length;i++) {
            if(i+1< arr.length && map.get(arr[i]) < map.get(arr[i+1])){
                res += (map.get(arr[i+1]) - map.get(arr[i]) );
                i++;
                continue;
            }
            if(arr[i] == 'M')
                res += 1000;
            else if(arr[i] == 'D')
                res += 500;
            else if(arr[i] == 'C')
                res += 100;
            else if(arr[i] == 'L')
                res += 50;
            else if(arr[i] == 'X')
                res += 10;
            else if(arr[i] == 'V')
                res += 5;
            else if(arr[i] == 'I')
                res += 1;
        }
        
        return res;
    }
}
