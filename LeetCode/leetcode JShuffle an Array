/*
  Shuffle a set of numbers without duplicates.

  Example:

  // Init an array with set 1, 2, and 3.
  int[] nums = {1,2,3};
  Solution solution = new Solution(nums);

  // Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.
  solution.shuffle();

  // Resets the array back to its original configuration [1,2,3].
  solution.reset();

  // Returns the random shuffling of array [1,2,3].
  solution.shuffle();

*/

/*
  to get the original, save a copy of the passed in array
  to shuffle it:
    original idea is to generate a random index, and assign the elements one by one
    right way is going through each index and generate a random index from 0 to this number, and do a swap
      (THIS is an actual SHUFFLE)
*/

public class Solution {
    private int[] original;
    private int[] shuffled;
    
    public Solution(int[] nums) {
        original = new int[nums.length];
        shuffled = new int[nums.length];
        for(int i=0;i<nums.length;i++)
            original[i] = nums[i];
        
    }
    
    /** Resets the array to its original configuration and return it. */
    public int[] reset() {
        return this.original;
    }
    
    /** Returns a random shuffling of the array. */
    public int[] shuffle() {
        
        Random rand = new Random();
        
        shuffled = original.clone();
        
        for(int i=1;i<shuffled.length;i++) {
            int nextIndex = rand.nextInt(i+1);
            swap(i, nextIndex);
        }
        
        return shuffled;
    }
    
    public void swap(int i, int j) {
        int temp=shuffled[i];
        shuffled[i] = shuffled[j];
        shuffled[j] = temp;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int[] param_1 = obj.reset();
 * int[] param_2 = obj.shuffle();
 */
