/*
Given two sorted integer arrays A and B, merge B into A as one sorted array.

Note:
You may assume that A has enough space (size that is greater or equal to m + n) to hold additional elements from B. The number of elements initialized in A and B are m and n respectively.
*/

/*Ideas:
Start from the end of the two arrays, and compare them before putting them in array A. Remaining part is similar merge() in binary sort
*/

public class Solution {
    public void merge(int A[], int m, int B[], int n) {
        
        int index=m+n-1;
		
		while(index>=0)
		{
			if(m>=1 && n>=1 && A[m-1]>B[n-1])
			{
				A[index]=A[m-1];
				m--;
			}
			else if(m>=1&&n>=1&&A[m-1]<=B[n-1])
			{
				A[index]=B[n-1];
				n--;
			}
			index--;
		}
		
		if(m == 0){  
            for(int i = 0; i < n; i++){  
                A[i] = B[i];  
            } 
		}
		if(n==0)
			return;
    }
}

//2015/12/15: almost forgot. Concise solution
/*
	Two cursors moving backward in both array.
	compare and Copy the larger element to the end of nums1.
*/
public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i=m-1;//mark the end of the num1
        int j=n-1;// mark the end of the num2
        int k=m+n-1; // help to copy the element to the end of num1
        
        while(i>=0&&j>=0){ // always move the bigger element to the end
        	if(nums1[i]>nums2[j]){
        		nums1[k--]=nums1[i--];
        	}else if(nums1[i]<nums2[j]){
        		nums1[k--]=nums2[j--];
        	}else{
        		nums1[k--]=nums1[i--];
        		nums1[k--]=nums2[j--];
        	}
        }
        
        while(j>=0){
        	nums1[k--]=nums2[j--];
        }
    }
