/*
Given an array and a value, remove all instances of that value in place and return the new length.

The order of elements can be changed. It doesn't matter what you leave beyond the new length. 
*/

/*
Basic idea is to swap the elements same as the target to the end of the array and shorten the array
***********something really important is that, when a target matches, the index i should not move on just in case the one sway to the front is also the target.
*/
public class Solution {
    public int removeElement(int[] A, int elem) {
        int len=A.length-1;
		for(int i=0;i<=len;i++)
		{
			if(A[i]==elem)
			{
				int temp=A[i];
				A[i]=A[len];
				A[len]=temp;
				i--;
				len--;
			}
		}
		
		return len+1;
    }
}


//2015/11/2
// almost forgot
/*idea:
	two pointer:
	begin: to the left of begin, there is no more elements equal to val (aka. mark the position of the first appearance of the "val")
	i: traverse from 0 to len-1
		: if a element does not equal to val, then copy it and assign to latest element with val*/
public class Solution {
    public int removeElement(int[] nums, int val) {
        int begin=0;
        for(int i=0;i<nums.length;i++){
            if(val!=nums[i])
                nums[begin++]=nums[i];
        }
        return begin;
    }
}

//2015/12/11: almost forget.
/*
	To swap with the end of the list is the right thing to do.
	To thing need to be noted: after swaping, the length decrease by 1;
	Do not move the front cursor after swapping. (in case the number swapped back is also the same number)
*/
