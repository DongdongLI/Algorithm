/*Write a function to find the longest common prefix string amongst an array of strings. */

/*Ideas:
Have the first one as tester and test the other one.(character by character)
if the length of string being tested is smaller than the index, break;
if the character at this point does not equal to the one in tester, break;
*/

public class Solution {
    public String longestCommonPrefix(String[] strs) {
        if(strs==null || strs.length==0)
			return "";
		if(strs.length==1)
			return strs[0];
		
		String temp=strs[0];
		int j=0;
		for(int i=0;i<temp.length();i++)
		{
			char t=temp.charAt(i);
			for(j=1;j<strs.length;j++)
			{
				if(strs[j].length()<=i||strs[j].charAt(i)!=t)
					return temp.substring(0, i);
			}
		}
		return temp;
    }
}

// more advanced way, instead of checking each string again and again, we make strs[0] as the initial prefix, 
// for each other string, if not match, cut done the last character of the prefix until there is a match

public class Solution {
    public String longestCommonPrefix(String[] strs) {
    	if(strs==null || strs.length==0)
    		return "";
    	String prefix=strs[0]; // make the first string as the initial prefix
    	int i=1; // start checking with the second one
    	while(i<strs.length){
    		while(strs[i].indexOf(prefix)!=0){ // prefix won't fit
    			prefix=prefix.substring(0,prefix.length()-1); // cut the last character and check again
    		}
    		i++;//check the next word
    	}
    	return prefix;
    }
}
//2015/20/21 came up with the old stupid way and then got to know the faster one
