/*
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.
*/
/*ideas
First, we find the pivot of the rotated array
Second, we use binary search to find the target
*/
public class Solution {
    public int search(int[] A, int target) {
        int pivot=0;
        for(int i=1;i<A.length;i++)
        {
        	if(i==A.length-1)
        	{
        		if(A[i]<A[i-1])
        		{
        			pivot=i;
        			break;
        		}
        		else
        		{
        			break;
        		}
        	}
        	if(A[i]<A[i-1] && A[i]<A[i+1])
        		pivot=i;
        	
        }
        //System.out.println("pivot: "+target);
        int left=binarySearch(A,0,pivot,target);
        int right=binarySearch(A,pivot,A.length-1,target);
        if(left == -1&& right==-1)
        	return -1;
        else if(left==-1)
        	return right;
        else
        	return left;
    }
	public int binarySearch(int[] A,int p,int q,int target)
	{
		while(p<=q)
		{
			int mid=(p+q)/2;
		if(A[mid]==target)
		{
			return mid;
		}
		else if(target>A[mid])
		{
			return binarySearch(A,mid+1,q,target);
		}
		else
			return binarySearch(A,p,mid-1,target);
		}
		return -1;
	}
}

//a much better solution
int search(int[] A, int target)
	{
		int l=0;
		int r=A.length-1;
		
		while(l<r)
		{
			int mid=(l+r)/2;
			if(A[mid]==target)
				return mid;
			
			if(A[mid]>=A[l])
			{
				if(target>=A[l] && target<A[mid])
					r=mid-1;
				else
					l=mid+1;
			}
			else
				if(target<=A[r] && target>A[mid])
					l=mid+1;
				else
					r=mid-1;
		}
		 return A[l] == target ? l : -1;//very important
	}
//2015/12/18: almost forgot
// an easier and more straightforward method

/*
	Find the rotation point first
	Start binary search very close to the normal version
	the only difference is: 
		after getting the mid point, calcute the real mid index by
		
		realMid=(mid+pivot)%n;
*/

public class Solution {
    public int search(int[] nums, int target) {
        // find pivot
		int low=0;
		int high=nums.length-1;
		
		while(low<high){
			int mid=(low+high)/2;
			if(nums[mid]>nums[high])
				low=mid+1;
			else
				high=mid;
		}
		int pivot=low;
		low=0;
		high=nums.length-1;
		while(low<=high){
			int mid=(low+high)/2;
			int trueMid=(mid+pivot)%nums.length;
			if(nums[trueMid]==target)
				return trueMid;
			else if(nums[trueMid]<target)
				low=mid+1;
			else
				high=mid-1;
				
		}
		return -1;
    }
}
