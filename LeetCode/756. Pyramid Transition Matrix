/*
  We are stacking blocks to form a pyramid. Each block has a color which is a one letter string, like `'Z'`.

  For every block of color `C` we place not in the bottom row, we are placing it on top of a left block of color `A` and right block of color `B`. We are allowed to place the block there only if `(A, B, C)` is an allowed triple.

  We start with a bottom row of bottom, represented as a single string. We also start with a list of allowed triples allowed. Each allowed triple is represented as a string of length 3.

  Return true if we can build the pyramid all the way to the top, otherwise false.

  Example 1:
  Input: bottom = "XYZ", allowed = ["XYD", "YZE", "DEA", "FFF"]
  Output: true
  Explanation:
  We can stack the pyramid like this:
      A
     / \
    D   E
   / \ / \
  X   Y   Z

  This works because ('X', 'Y', 'D'), ('Y', 'Z', 'E'), and ('D', 'E', 'A') are allowed triples.
  Example 2:
  Input: bottom = "XXYX", allowed = ["XXX", "XXY", "XYX", "XYY", "YXZ"]
  Output: false
  Explanation:
  We can't stack the pyramid to the top.
  Note that there could be allowed triples (A, B, C) and (A, B, D) with C != D.
  Note:
  bottom will be a string with length in range [2, 8].
  allowed will have length in range [0, 200].
  Letters in all strings will be chosen from the set {'A', 'B', 'C', 'D', 'E', 'F', 'G'}.
*/

class Solution {
    public boolean pyramidTransition(String bottom, List<String> allowed) {
        Map<String, List<String>> map = new HashMap<>();
        // build a map to store all the allowed strings such as "XX":["X", "Y"]
        for(String str: allowed) {
            String sub = str.substring(0,2);
            if(!map.containsKey(sub))
                map.put(sub, new ArrayList<>());
            map.get(sub).add(str.substring(2,3));
        }
        // start with index = 0, and empty next level
        return canStack(bottom, map, 0, "");
    }
    
    boolean canStack(String bottom, Map<String, List<String>> map, int index, String nextLevel) {
        int len = bottom.length();
        // if the len is 2 then the level above it only has one letter, 
        // meaning as long as there is any match in allowed strings, it will work
        if(len == 2)return map.containsKey(bottom);
        
        // This case it means the level above has been built, 
        // can proceed with testing that level
        if(index>bottom.length()-2)
          return canStack(nextLevel, map, 0, "");
          
        String sub = bottom.substring(index, index+2);
        if(!map.containsKey(sub))return false;

        for(int i=0;i<map.get(sub).size();i++){
            // trying all possible allowed strings based on the first 2 letters.
            // nextLevel+map.get(sub).get(i)) is building a temporary next level
            if(canStack(bottom, map, index+1, nextLevel+map.get(sub).get(i)))
                return true;
        }
        // nothing works, return false.
        return false;
    }
}
