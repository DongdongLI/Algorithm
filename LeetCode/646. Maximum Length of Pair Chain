/*
  You are given n pairs of numbers. In every pair, the first number is always smaller than the second number.

  Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.

  Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.

  Example 1:
  Input: [[1,2], [2,3], [3,4]]
  Output: 2
  Explanation: The longest chain is [1,2] -> [3,4]
*/

/*
  Sort the 2D array, for l1,r1  l2,r2
  sort them by l first, then r
  
  dp[i]: length of longest chain containing pairs[i];
  
  if pairs[i] can connect with pairs[i-1] properly, then dp[i] = dp[i-1]+1;
  else
    start from i-1 go all the way back to find a pairs[j] that can take pairs[i]
    if not found, then dp[i] = 1
*/

class Solution {
    public int findLongestChain(int[][] pairs) {
        
        Arrays.sort(pairs, new Comparator<int[]>(){
            @Override
            public int compare(int[] a1, int[] a2){
                if(a1[0] != a2[0])
                    return a1[0] - a2[0];
                return a1[1] - a2[1];
            }
        });
        
        int maxLen = 1;
        
        int[] dp = new int[pairs.length];
        dp[0] = 1;
        
        for(int i=1;i<dp.length;i++){
            if(pairs[i][0] > pairs[i-1][1])
                dp[i] = dp[i-1] + 1;
            else{
                int j=i-1;
                while(j>=0 && pairs[i][0] <= pairs[j][1])
                    j--;
                if(j<0)
                    dp[i] = 1;                
                else
                    dp[i]=dp[j]+1;
            }       
            
            maxLen = Math.max(maxLen, dp[i]);
        }
        
        return maxLen;
    }
}
