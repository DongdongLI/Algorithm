/*
  You are given n pairs of numbers. In every pair, the first number is always smaller than the second number.

  Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.

  Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.

  Example 1:
  Input: [[1,2], [2,3], [3,4]]
  Output: 2
  Explanation: The longest chain is [1,2] -> [3,4]
*/

/*
  Sort the 2D array, for l1,r1  l2,r2
  sort them by l first, then r
  
  dp[i]: length of longest chain containing pairs[i];
  
  if pairs[i] can connect with pairs[i-1] properly, then dp[i] = dp[i-1]+1;
  else
    start from i-1 go all the way back to find a pairs[j] that can take pairs[i]
    if not found, then dp[i] = 1
*/

class Solution {
    public int findLongestChain(int[][] pairs) {
        Arrays.sort(pairs, new Comparator<int[]>(){
            @Override
            public int compare(int[] o1, int[] o2){
                if(o1[0]!=o2[0])
                    return o1[0]-o2[0];
                else
                    return o1[1]-o2[1];
            }
        });
        // dp[i] is the length of longest chain can be formed ends at pairs[i];
        int[] dp = new int[pairs.length];
        int max = 1;
        dp[0] = 1;
        
        for(int i=1;i<pairs.length;i++){
            // if it can fit in just fine with the previous pair. 
            if(pairs[i][0]>pairs[i-1][1])
                dp[i] = dp[i-1]+1;
            else{
                // go back as much as it can to find a proper pair and follow it
                int j = i-1;
                while(j>=0 && pairs[j][1]>=pairs[i][0])
                    j--;
                
                if(j>=0)
                    dp[i] = dp[j]+1;
                else
                    dp[i] = 1;
            }   
            // update max
            max = Math.max(max, dp[i]);
        }
        
        return max;
    }
}
