/*
    Evaluate the value of an arithmetic expression in Reverse Polish Notation.

    Valid operators are +, -, *, /. Each operand may be an integer or another expression.
    
    Some examples:
      ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
      ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
*/

/*
    if it is a number:
      push into the stack
    if it is an operator:
      pop out two numbers,
      the second one we get should be the first operatant
      
    until the end of the array.
    
    the result lies in the stack
*/

public class Solution {
    public int evalRPN(String[] tokens) {
        Stack<String> stack=new Stack<String>();
        for(int i=0;i<tokens.length;i++){
        	if(tokens[i].length()==1 && tokens[i].equals("+") || tokens[i].equals("-")|| tokens[i].equals("*")|| tokens[i].equals("/")){
        		// it is an operator
        		int a=Integer.valueOf(stack.pop());
        		int b=Integer.valueOf(stack.pop());
        		int res=0;
        		
        		String op=tokens[i];
        		switch (op) {
				case "+":
					res=b+a;
					break;
				case "-":
					res=b-a;
					break;
				case "*":
					res=b*a;
					break;
				case "/":
					res=b/a;
					break;

				default:
					break;
				}
        		stack.push(res+"");
        	}
        	else{ // it is an number
        		stack.push(tokens[i]);
        	}
        }
        // the last result is still in the stack
        return Integer.valueOf(stack.pop());
    }
}
