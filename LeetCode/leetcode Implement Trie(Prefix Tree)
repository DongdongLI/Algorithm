/*
  Implement a trie with insert, search, and startsWith methods.

  Note:
  You may assume that all inputs are consist of lowercase letters a-z.
*/

/* trivial*/
/*
    Use HashMap to save the child node of one node
    
    one thing need to keep in mind is that, we need to mark if a node is the end of a word
*/
class TrieNode {
    // Initialize your data structure here.
	private char val; // keep the letter
    HashMap<Character, TrieNode> children=new HashMap<Character, TrieNode>(); // save the children
    boolean isLeaf;// mark the end of the word, false by default
	public TrieNode() { // only used for root
        val=' ';
    }
	public TrieNode(char val){
		this.val=val;
	}
	
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        TrieNode p=root; // get a pointer
        for(int i=0;i<word.length();i++){ // traverse the word
        	if(p.children.containsKey(word.charAt(i))){ // if the letter appears in the children
        		p=p.children.get(word.charAt(i)); // jump to that node
        	}else{
        		p.children.put(word.charAt(i), new TrieNode(word.charAt(i))); // if it doesn't, create and insert
        		p=p.children.get(word.charAt(i)); // then jump
        	}
        	if(i==word.length()-1)p.isLeaf=true; // if this is the end of the word, mark the end flag
        }
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
    	if(word==null || word.length()==0)
    		return true;
    	
    	TrieNode p=root;
    	int i=0;
    	while(i<word.length())  // mostly same as insert, difference is just break out when there is no matching letter
    	{
    		if(p.children.containsKey(word.charAt(i))){
    			p=p.children.get(word.charAt(i));
    			i++;
    		}else{
    			break;
    		}
    	}
    	if(i<word.length()){
    		return false;
    	}else{
    		if(p.isLeaf)return true; // here is the tricky part: return false if the last matching letter appear not having the end flag
    			return false;
    	}
    	
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
    	if(prefix==null || prefix.length()==0)
    		return true;
    	
    	TrieNode p=root;
    	int i=0;
    	while(i<prefix.length())
    	{
    		if(p.children.containsKey(prefix.charAt(i))){
    			p=p.children.get(prefix.charAt(i));
    			i++;
    		}else{
    			break;
    		}
    	}
    	return i<prefix.length() ? false:true; // 99% same as the searching, instead we only care about the letter is match or not
    }
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.insert("somestring");
// trie.search("key");

//*************************

we can also use array to manage it
