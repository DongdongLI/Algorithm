/*
Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.

The Sudoku board could be partially filled, where empty cells are filled with the character '.'.


A partially filled sudoku which is valid.

Note:
A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.


*/
/*ideas:
Based on the rule, any row should not have duplicate number,
any column should not have duplicate number
any block should not have duplicate number
*/
public class Solution {
    public boolean isValidSudoku(char[][] board) {
        boolean row[][]=new boolean[9][9];
		boolean column[][]=new boolean[9][9];
		boolean block[][]=new boolean[9][9];
		
		for(int i=0;i<board.length;i++)
			for(int j=0;j<board[0].length;j++)
			{
				if(board[i][j]!='.')
				{
					if(row[i][board[i][j]-'0'-1]||column[j][board[i][j]-'0'-1]||block[i/3*3+j/3][board[i][j]-'0'-1])
						return false;
					
					else
					{
						row[i][board[i][j]-'0'-1]=true;
						column[j][board[i][j]-'0'-1]=true;
						block[i/3*3+j/3][board[i][j]-'0'-1]=true;
					}
				}
			}
		return true;
    }
}

//2015/12/25: nail it. same code. Farewell!
key point. to get the block# using i and j: #=i/3*3+j/3
