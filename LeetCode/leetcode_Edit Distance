/*
 Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character
*/

/*idea
Dynamic programming:
For any position [i][j] (word1.charAt(i)=='x' word2.charAt(j)=='y')
We can change one character from position[i-1][j-1]
Or delete one from the longer one(delete x from word1)
Or add one to the shorter one(add y in word1)
*/
public class Solution {
    public int minDistance(String word1, String word2) {
        int[][] moves=new int[word1.length()+1][word2.length()+1];
        
        for(int i=0;i<moves.length;i++)
        	moves[i][0]=i;
        for(int j=0;j<moves[0].length;j++)
        	moves[0][j]=j;
        
        for(int i=1;i<moves.length;i++)
        	for(int j=1;j<moves[0].length;j++)
        	{
        		if(word1.charAt(i-1)==word2.charAt(j-1))
        			moves[i][j]=moves[i-1][j-1];
        		else
        		{
        			moves[i][j]=Math.min(moves[i-1][j-1]+1, Math.min(moves[i-1][j]+1, moves[i][j-1]+1));
        		}
        	}
        return moves[word1.length()][word2.length()];
    }
}
