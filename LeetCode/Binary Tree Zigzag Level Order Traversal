/*
  Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

  For example:
  Given binary tree [3,9,20,null,null,15,7],
      3
     / \
    9  20
      /  \
     15   7
  return its zigzag level order traversal as:
  [
    [3],
    [20,9],
    [15,7]
  ]
*/

/*
  Use stack to deal with the reverse of a certain level.
*/

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        List<List<Integer>> res = new ArrayList<>();
        if(root == null)
            return res;
        // queue used for the whole tree traverse
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        // so we know where each level ends
        int sizeOfLevel = 1;
        // a toggle will be on and off as level changes
        boolean reverse = false;
        
        Stack<TreeNode> stack = new Stack<>();
        
        while(!queue.isEmpty()){
            List<Integer> partial = new ArrayList<>();
            int sizeOfNextLevel = 0;
            if(!reverse){
                for(int i=0;i<sizeOfLevel;i++){
                    TreeNode node = queue.poll();
                    partial.add(node.val);

                    if(node.left!=null){
                        queue.offer(node.left);
                        sizeOfNextLevel++;
                    }
                    if(node.right!=null){
                        queue.offer(node.right);
                        sizeOfNextLevel++;
                    }
                }
            }
            else{
                for(int i=0;i<sizeOfLevel;i++){
                    TreeNode node = queue.poll();
                    // if reverse is required, put the node in the stack first
                    stack.push(node);

                    if(node.left!=null){
                        queue.offer(node.left);
                        sizeOfNextLevel++;
                    }
                    if(node.right!=null){
                        queue.offer(node.right);
                        sizeOfNextLevel++;
                    }
                    
                }
                // pop the nodes then get the val
                while(!stack.isEmpty()){
                    partial.add(stack.pop().val);
                }
            }
            reverse = !reverse;
            res.add(partial);
            sizeOfLevel = sizeOfNextLevel;
        }
        
        return res;
    }
}
