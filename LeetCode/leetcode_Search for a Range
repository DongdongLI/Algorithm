/*
Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4]. 
*/


public class Solution {
    public int[] searchRange(int[] A, int target) {
		int result[]={-1,-1};
		int low=binarySearch(A, 0, A.length-1, target-0.5);
		
		
		if(low>=A.length||A[low]!=target)
			return result;
		result[0]=low;
		result[1]=binarySearch(A, 0, A.length-1, target+0.5)-1;
		return result;
    }
	public int binarySearch(int[] a,int l,int r,double target)
	{
		while(l<=r)
		{
			int m=(l+r)/2;
			if(a[m]==target)
			{
				return m;
			}
			else if(a[m]>target)
			{
				r=m-1;
			}
			else
			{
				l=m+1;
			//	return;
			}
			
		}
		return l;
	}
}
