/*
  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

  For example:
  Given binary tree [3,9,20,null,null,15,7],
      3
     / \
    9  20
      /  \
     15   7
  return its level order traversal as:
  [
    [3],
    [9,20],
    [15,7]
  ]
*/

/*
  trivial solution:
  one list representing the current layer
  the other represents the next layer
*/
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {

        List<List<Integer>> res = new ArrayList<>();
        
        if(root == null)return res;
                
        List<TreeNode> cur = new LinkedList();
        List<TreeNode> next = new LinkedList();
        
        cur.add(root);
        while(!cur.isEmpty()) {
            next = new LinkedList();
            List<Integer> curLayerInt = new ArrayList<>();
            for(TreeNode node: cur){
                curLayerInt.add(node.val);
                
                if(node.left!=null)next.add(node.left);
                if(node.right!=null)next.add(node.right);
            }
            res.add(curLayerInt);
            cur = next;
        }
        
        return res;
    }
}

/*
  We can also use queue (first in first out) to do this. slightly faster
*/

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {

        List<List<Integer>> res = new ArrayList<>();
        
        if(root == null)return res;
                
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        while(!queue.isEmpty()){
            List<Integer> partialRes = new ArrayList<>();
            
            int sizeOfThisLayer = queue.size();
            for(int i=0;i<sizeOfThisLayer;i++){
                TreeNode node= queue.poll();
                partialRes.add(node.val);
                if(node.left!=null)queue.offer(node.left);
                if(node.right!=null)queue.offer(node.right);
            }
            res.add(partialRes);
        }
        
        return res;
    }
}
