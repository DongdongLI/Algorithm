/*
    Implement the following operations of a stack using queues.

  push(x) -- Push element x onto stack.
  pop() -- Removes the element on top of the stack.
  top() -- Get the top element.
  empty() -- Return whether the stack is empty.
  Notes:
  You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
  Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
  You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).
*/

class MyStack {
	Queue<Integer> queue=new LinkedList<Integer>();
    // Push element x onto stack.
    public void push(int x) {
    	queue.add(x);
    }

    // Removes the element on top of the stack.
    public void pop() {
        Collections.reverse((List<?>) queue);
        queue.poll();
        Collections.reverse((List<?>) queue);
    }

    // Get the top element.
    public int top() {
        Collections.reverse((List<?>) queue);
        int temp= queue.peek();
        Collections.reverse((List<?>) queue);
        return temp;
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return queue.size()==0;
    }
}

//******************* second solution

package leetcodePlayground;

import java.util.Collection;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

class MyStack {
	Queue<Integer> q1=new LinkedList<Integer>();
	Queue<Integer> q2=new LinkedList<Integer>();
    // Push element x onto stack.
    public void push(int x) {
    	q1.add(x);
    }

    // Removes the element on top of the stack.
    // Always make the last element available
    public void pop() {
       while(q1.size()>1){
    	   q2.add(q1.poll());
       }
       q1.poll();
       
       Queue<Integer> temp=q1;
       q1=q2;
       q2=temp;
    }

    // Get the top element.
    // different from pop, we will keep the top element
    public int top() {
    	while(q1.size()>1){
     	   q2.add(q1.poll());
        }
        int temp=q1.peek();
        q2.add(q1.poll());
        Queue<Integer> t=q1;
        q1=q2;
        q2=t;
        return temp;
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return (q1.size()+q2.size())==0;
    }
}
