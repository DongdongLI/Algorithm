/*
    Implement the following operations of a stack using queues.

  push(x) -- Push element x onto stack.
  pop() -- Removes the element on top of the stack.
  top() -- Get the top element.
  empty() -- Return whether the stack is empty.
  Notes:
  You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
  Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
  You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).
*/

class MyStack {
	Queue<Integer> queue=new LinkedList<Integer>();
    // Push element x onto stack.
    public void push(int x) {
    	queue.add(x);
    }

    // Removes the element on top of the stack.
    public void pop() {
        Collections.reverse((List<?>) queue);
        queue.poll();
        Collections.reverse((List<?>) queue);
    }

    // Get the top element.
    public int top() {
        Collections.reverse((List<?>) queue);
        int temp= queue.peek();
        Collections.reverse((List<?>) queue);
        return temp;
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return queue.size()==0;
    }
}

/*
	Two queue solution
*/
class MyStack {
    // topQueue will always contain 1 element while rest will contain the rest
    Queue<Integer> topQueue;
    Queue<Integer> restQueue;
    
    /** Initialize your data structure here. */
    public MyStack() {
        topQueue = new LinkedList<>();
        restQueue = new LinkedList<>();
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        topQueue.offer(x);
        // send the elements to restQueue if there's more then 1 element in top
        if(topQueue.size()>1)
            restQueue.offer(topQueue.poll());
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        int toReturn = topQueue.poll();
        
        topQueue = restQueue;
        restQueue = new LinkedList<>();
        
        while(topQueue.size()>1 && !topQueue.isEmpty())
            restQueue.offer(topQueue.poll());
        
        return toReturn;
    }
    
    /** Get the top element. */
    public int top() {
        return topQueue.peek();
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        return topQueue.isEmpty();
    }
}
