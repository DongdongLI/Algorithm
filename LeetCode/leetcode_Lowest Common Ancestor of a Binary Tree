/*
  Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

  According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as 
  the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”
  
          _______3______
         /              \
      ___5__          ___1__
     /      \        /      \
     6      _2       0       8
           /  \
           7   4
  For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, 
  since a node can be a descendant of itself according to the LCA definition.
*/

/*
  Trivial Solution:
    The basic idea is:
      
      *For every two node, if they don't belong to the same side of the binary tree, then their Common Ancestor can only be root.
      *If they are in the same side, one node may be the ancestor of the other
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    	if(root==null)
    		return null;
    	
    	boolean pInLeft=exist(root.left, p); // if p is in left subtree
    	boolean qInLeft=exist(root.left, q); // if q is in left subtree
    	
    	if(pInLeft!=qInLeft){ // from different side
    		return root;  // it should be the root
    	}else{
    		if(pInLeft){ // both in the left
    			return lowestCommonAncestor(root.left, p, q); // continute in the left
    		}else{ // both in the right side (maybe one or both of p and q is the root)
    			if(p==root||q==root)return root;
    			else // not root, continue in right subtree
    				return lowestCommonAncestor(root.right, p, q);
    		}
    	}
    }
    public boolean exist(TreeNode root,TreeNode target){
    	if(root==null)
    		return false;
    	if(root==target)
    		return true;
    	return exist(root.left, target)||exist(root.right, target); // if the target exists in left or right
    }
}

/*
    Faster way: minor modification of in-order traverse
    
    * any one of p or q equals to root, then it is root
    * check the left and the right,
      if both sides have valid solution, it is again the root
      else should be only one side
*/

public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    	if(root==null || root==p || root==q)return root;
    	TreeNode left=lowestCommonAncestor(root.left, p, q);
    	TreeNode right=lowestCommonAncestor(root.right, p, q);
    	// cannot find the result in left, or right, then it is root
    	return left == null ? right : right == null ? left : root;
    }
}

/*AKA.*/
if(left!=null && right!=null)
    	    return root;
    	else if(left==null)
    	    return right;
    	else
    	    return left;

//2016/1/9: Almost forgot. need refresh.
