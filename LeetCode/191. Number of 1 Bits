/*
  Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight).

  For example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function 
  should return 3.


*/

/*
    Bit manipulation:
      
      1&1=1,1&0=0,0&0=1
      0^0=0,0^1=1
      1^1=0
      
      so
      111&110=110
      110&101=100
      100&011=000
*/

public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int countOfOne=0;
        while(n!=0){
        	n=(n&(n-1));
        	countOfOne++;
        }
        return countOfOne;
    }
}
// another method should be working
public int hammingWeight(int n) {
        int countOfOne=0;
        while(n!=0){
        	if((n&1)==1)
        		countOfOne++;
        	n=(n>>1);
        }
        return countOfOne;
    }
