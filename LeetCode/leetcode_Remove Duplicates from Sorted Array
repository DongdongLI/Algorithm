/*
 Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

For example,
Given input array A = [1,1,2],

Your function should return length = 2, and A is now [1,2]. 
*/
/*
We only need the length. So the way of doing that is to use 2 pointers, the previous one will always in front of any duplications, 
the later one j will skip the duplicate ones and find a unique one and assign to the next position for i.
*/
public class Solution {
    public int removeDuplicates(int[] A) {
        if(A.length<2)
			return A.length;
		
		int i=0;
		for(int j=1;j<A.length;j++)
		{
			if(A[i]!=A[j])
			{
				i++;
				A[i]=A[j];
			}
		}
		return i+1;
    }
}

// 2015/11/2: almost forgot
/*
	refresh:
	two pointer: 
		one pointer traverse from 1 to the end of the array
		the other always stays in a point where there is no duplication before it
	
*/
