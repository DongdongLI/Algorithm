/*
  You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.

  Find out how many ways to assign symbols to make sum of integers equal to target S.

  Example 1:
  Input: nums is [1, 1, 1, 1, 1], S is 3. 
  Output: 5
  Explanation: 

  -1+1+1+1+1 = 3
  +1-1+1+1+1 = 3
  +1+1-1+1+1 = 3
  +1+1+1-1+1 = 3
  +1+1+1+1-1 = 3

  There are 5 ways to assign symbols to make the sum of nums be target 3.
  Note:
  The length of the given array is positive and will not exceed 20.
  The sum of elements in the given array will not exceed 1000.
  Your output answer is guaranteed to be fitted in a 32-bit integer.
*/

/*
  P: positive numbers
  N: negative numbers
  
  sum(p)-sum(N)=target
  sum(p)+sum(n)=sum(nums)
  
  2*sum(p) = sum(nums)+target
  
  so the prblem becomes how many combo we can have to get sum(p)
  
  the sub-problem is: 
    how many solution for sum - x (x is an element of the array)
    dp[sum]=dp[sum-n]+dp[sum] n in the list of array
    be careful if there's dups in the list
*/

public class Solution {
    
    public int findTargetSumWays(int[] nums, int S) {
        
        int sum = 0;
        for(int i: nums)
            sum += i;
        
        int sumPositive = (S+sum)/2;
        
        if( S>sum ||(S+sum)%2 == 1)return 0;
        
        return helper(nums, sumPositive);
    }
    
    public int helper(int[] nums, int sum){
        // dp[i] means how many ways you can sum up to i
        int[] dp = new int[sum+1];
        dp[0]=1;
        for(int i=0;i<nums.length;i++){
            // warning: we have to guarentee we start from the back, or in case of [1,1,1,1,1], elements will be reuse, and we dont' want that to happen
            for(int j=sum;j>=nums[i];j--){    
                // this j can be used to sum up to i
                dp[j] += dp[j-nums[i]] ;
            }
        }
        return dp[sum];
    }
}

/*
  Proper dfs solution
*/
class Solution {
    int count = 0;
    public int findTargetSumWays(int[] nums, int S) {
        helper(nums, S, 0, 0);
        
        return count;
    }
    
    public void helper(int[] nums, int target, int start, int sum){
        if(start==nums.length){
            if(sum==target)
                count++;
            return;
        }
        helper(nums, target, start+1, sum+nums[start]);
        helper(nums, target, start+1, sum-nums[start]);
    }
}
