/*
    Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be
    used and each combination should be a unique set of numbers.

    Ensure that numbers within the set are sorted in ascending order.
    
    
    Example 1:
    
    Input: k = 3, n = 7
    
    Output:
    
    [[1,2,4]]
    
    Example 2:
    
    Input: k = 3, n = 9
    
    Output:
    
    [[1,2,6], [1,3,5], [2,3,4]]

*/

/*
  BFS straightforward solution:
*/

public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        
    	List<List<Integer>> result=new ArrayList<List<Integer>>();
    	boolean[] used=new boolean[9];
    	List<Integer> temp=new ArrayList<>();
    	
    	help(result, temp, used, 0, k, n, 0);
    	
    	return result;
    }
    public void help(List<List<Integer>> result, List<Integer> temp, boolean[] used,int sum,int k,int n,int start){
    	if(temp.size()==k){
    		if(sum==n){
    			result.add(new ArrayList<Integer>(temp));
    			return;
    		}else
    			return;
    	}
    	if(sum>=n)return;
    	
    	for(int i=start;i<used.length;i++){
    		if(used[i]==false){
    			temp.add(i+1);
    			used[i]=true;
    			start++;
    			help(result, temp, used, sum+(i+1), k, n, start);
    			used[i]=false;
    			temp.remove(temp.size()-1);
    		}
    	}
    }
}

// 2016/1/4: nail it with shorter solution
public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res=new LinkedList<List<Integer>>();
        List<Integer> temp=new LinkedList<Integer>();
        help(res,temp,0,k,n,1);
        return res;   
    }
    public void help(List<List<Integer>> res,List<Integer> temp,int sum,int k,int n,int start){
        if(sum==n && temp.size()==k ){
            res.add(new LinkedList<Integer>(temp) );
            return;
        }else if(sum>n || temp.size()>k){
            return;
        }else{
            for(int i=start;i<=9;i++){
                temp.add(i);
                help(res,temp,sum+i,k,n,i+1);
                temp.remove(temp.size()-1 );
            }
        }
    }
}
