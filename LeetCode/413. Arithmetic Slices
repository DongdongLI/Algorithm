/*
  A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

  For example, these are arithmetic sequence:

  1, 3, 5, 7, 9
  7, 7, 7, 7
  3, -1, -5, -9
  The following sequence is not arithmetic.

  1, 1, 2, 5, 7

  A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 <= P < Q < N.

  A slice (P, Q) of array A is called arithmetic if the sequence:
  A[P], A[p + 1], ..., A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 < Q.

  The function should return the number of arithmetic slices in the array A.


  Example:

  A = [1, 2, 3, 4]

  return: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.
*/

/*
  Solution:Find every possible arithmetic sequences and count for each of them how many arithmetic sub-sequence they have
*/

public class Solution {
    public int numberOfArithmeticSlices(int[] A) {
        if(A==null || A.length == 0 || A.length < 3)
            return 0;
        
        int res = 0;
            
        // i is the start point, find every single longest arithmetic sequence
        for(int i=0;i<=A.length-3;i++){
            int dif = A[i+1] - A[i];
            if(A[i+2] - A[i+1] == dif) {
                int j = i+3;
                while(j<A.length && A[j]-A[j-1]==dif){
                    j++;
                }
                
                int len = j - i +1 -1; // to -1 is because j is current at a position that no longer belong to the arithmetic sequence
                res+=(helper(len));
                
                i=j-1-1; // for this example: 18,18,18,19,20,21,22,...
                // after finding 18 18 18, we need to move back to make 18 19 20 possible
                // however i is going to increase itself after each loop, so -1 again
            }
        }
        
        return res;
    }
    
    public int helper(int len){
        int res=0;
        
        if(len==3)
            return 1;
        else{
            int howManyLenThree = len-3+1;
            for(int i=1;i<=howManyLenThree;i++)
                res+=i;
        }
        return res;
    }
}

/*
  Faster and more concise file
*/
class Solution {
    public int numberOfArithmeticSlices(int[] A) {
        int res = 0;
        
        if(A == null || A.length<3)
            return res;
        
        int left = 0;
        // make sure there's enough space left
        while(left<A.length-2) {
            // make sure we have a triplet
            if(A[left+1]-A[left] != A[left+2] - A[left+1]) {
                left++;
                continue;
            }
            else {
                int diff = A[left+1] - A[left];
                int right = left+2;
                // start expanding to the right
                while(right+1<A.length && A[right+1]-A[right] == diff){
                    right++;
                }
                int len = right - left+1;
                int combo = 0;
                // C 5 3 is 6, which is 3+2+1
                for(int i=1;i<=len-3+1;i++)
                    combo+=i;
                res+=combo;
                // for sequence like 1,2,3,4,4,4,4... you want the left to start at "right"
                left=right;
            }
        }
        
        return res;
    }
}
