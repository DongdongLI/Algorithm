/*
  Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.
  Example 1:
  Input:s1 = "ab" s2 = "eidbaooo"
  Output:True
  Explanation: s2 contains one permutation of s1 ("ba").
  Example 2:
  Input:s1= "ab" s2 = "eidboaoo"
  Output: False
  Note:
  The input strings only contain lower case letters.
  The length of both given strings is in range [1, 10,000].
*/

// straightforward
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s2.length() < s1.length())
            return false;
        int[] map = new int[26];
        for(int i=0;i<s1.length();i++)
            map[s1.charAt(i)-'a']++;
        
        int left = 0;
        int right = 0;
        // moving the right side of the window and create a 
        // fixed size window
        for(;right<s1.length();right++) {
            map[s2.charAt(right)-'a']--;
        }
        
        while(right<s2.length()) {
            // an easy to check if all elements have showed up the same amount of time
            // in both string
            if(isAllZero(map))
                return true;
            
            map[s2.charAt(left++)-'a']++;
            map[s2.charAt(right++)-'a']--;
        }
        
        if(isAllZero(map))
                return true;
        
        return false;
    }
    
    public boolean isAllZero(int[] arr) {
        for(int i: arr)
            if(i!=0)
                return false;
        return true;
    }
}
