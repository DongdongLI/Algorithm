/*
  Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

  The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.
  
  You may assume that each input would have exactly one solution.
  
  Input: numbers={2, 7, 11, 15}, target=9
  Output: index1=1, index2=2
*/

/*
  Two cursors moving towards each other from two ends. Each of them only moves in one direction, no way back.

  Proof that it would work:
    [][]: since there will always be exactly one solution, it would work.
    [][][]: l start at index 0, r starts at index 2. Their sums are either too big or too small or just right, and each one of them leads
          to unique results, which are the only three possible results of this case.
    [i][][][j]: 
          i+j==tar? done
          i+j<tar [][i][][j]
            back to [][][] case...
          i+j>tar [i][][j][]
            back to [][][] case...
*/

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        
        int l = 0;
        int r = numbers.length-1;
        
        while(l<=r){
            if(numbers[l] + numbers[r] == target)
                return new int[]{l+1,r+1};
            else if(numbers[l]+numbers[r] < target)
                l++;
            else
                r--;
        }
        
        return null;
    }
}
