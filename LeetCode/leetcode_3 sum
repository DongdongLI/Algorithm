/*
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

    Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
    The solution set must not contain duplicate triplets.

    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)

*/
//Solution 1: use HashSet to kill duplicates,   straightforward but slow
public class Solution {
    public ArrayList<ArrayList<Integer>> threeSum(int[] num) {
        ArrayList<ArrayList<Integer>> res=new ArrayList<ArrayList<Integer>>();
		HashSet<ArrayList<Integer>> noDuplicate=new HashSet<ArrayList<Integer>>();
		
		Arrays.sort(num);
		int i=0,j=0,k=0;
		for(i=0;i<=num.length-3;i++)
		{
			int low=i+1;
			int high=num.length-1;
			while(low<high)
			{
				int sum=num[low]+num[high]+num[i];
				if(sum==0)
				{
					ArrayList<Integer> temp=new ArrayList<Integer>();
					temp.add(0,num[i]);
					temp.add(1,num[low]);
					temp.add(2,num[high]);
					if(!noDuplicate.contains(temp))
					{
						noDuplicate.add(temp);
						res.add(temp);
					}
					high--;
					low++;
				}
				else if(sum>0)
					high--;
				else
					low++;
			}
		}
		
		return res;}
}
//solutions 2: use pointer to remove duplicate could be a little faster
public class Solution {
    public ArrayList<ArrayList<Integer>> threeSum(int[] num) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(num.length<3||num == null)
            return res;
        
        Arrays.sort(num);
        
        for(int i = 0; i <= num.length-3; i++){
            if(i==0||num[i]!=num[i-1]){//remove dupicate
                int low = i+1;
                int high = num.length-1;
                while(low<high){
                    int sum = num[i]+num[low]+num[high];
                    if(sum == 0){
                        ArrayList<Integer> unit = new ArrayList<Integer>();
                        unit.add(num[i]);
                        unit.add(num[low]);
                        unit.add(num[high]);
                        
                        res.add(unit);
                        
                        low++;
                        high--;
                        // this two while loops can only be put here
                        while(low<high&&num[low]==num[low-1])//remove dupicate
                            low++;
                        while(low<high&&num[high]==num[high+1])//remove dupicate
                            high--;
                            
                    }else if(sum > 0)
                        high --;
                     else
                        low ++;
                }
            }
        }
        return res;
    }
}
//2015/10/21: only come up with the trivil solution: after reading the solution than remember the quick solution.
