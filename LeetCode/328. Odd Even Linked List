/*
  Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.

  You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

  Example 1:

  Input: 1->2->3->4->5->NULL
  Output: 1->3->5->2->4->NULL
  Example 2:

  Input: 2->1->3->5->6->4->7->NULL
  Output: 2->3->6->7->1->5->4->NULL
  Note:

  The relative order inside both the even and odd groups should remain as it was in the input.
  The first node is considered odd, the second node even and so on ...
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head == null || head.next == null || head.next.next==null)
            return head;
        // generate two seperate list, then connect them together.
        ListNode odd = head;
        ListNode even = head.next;
        
        ListNode oddNode = odd;
        ListNode evenNode = even;
        // during this process, if the the length is even, then all the links between odd and even number will be broken
        while(oddNode.next != null && oddNode.next.next!=null && evenNode.next!=null &&evenNode.next.next!=null) {
            oddNode.next = oddNode.next.next;
            evenNode.next = evenNode.next.next;
            
            oddNode = oddNode.next;
            evenNode = evenNode.next;
        }
        // for the case when the length is odd, the last even number is still connected to the last odd number
        if(oddNode.next != null && oddNode.next.next!=null) {
            oddNode.next = oddNode.next.next;
            evenNode.next = null;
            oddNode = oddNode.next;
        }
        
        oddNode.next = even;
        
        
        
        return head;
    }
}
