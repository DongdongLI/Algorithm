/*
    Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. 
    Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
*/

/*
    Sort the array.
    for each possible i, set low=i+1, high=len-1,
      compare the sum and the target, update the exising closest sum if necessary
      
      change the high and low for closer sum
*/

public class Solution {
    public int threeSumClosest(int[] nums, int target) {
        if(nums==null || nums.length==0)
        	return 0;
        
        int distance=Integer.MAX_VALUE;
        int close=0;
        Arrays.sort(nums);
        for(int i=0;i<nums.length-2;i++){
        	
        	int low=i+1;
        	int high=nums.length-1;
        	while(low<high){
        		int sum=nums[i]+nums[low]+nums[high];
        		if(Math.abs(sum-target)<distance){
        			close=sum;
        			distance=Math.abs(sum-target);
        		}
        		if(sum==target){
        			return close;
        		}else if(sum>target){
        			high--;
        		}else{
        			low++;
        		}
        	}
        }
        return close;
    }
}
// 2015/10/21: nail it. (Maybe because just finish sum 3)
