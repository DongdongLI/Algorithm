/*
  Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

  Note: Do not modify the linked list.
  
  Follow up:
  Can you solve it without using extra space?
*/

/*
  Idea: 
  1: make sure if there is a cycle
    slow and fast pointer
  2: find the join point
    ...
    
    two nodes meet at step k
    slow has moved k distance
    fast has moved 2k distance
    the length of the cycle is r
    so 2k-k=nr
    
    distance between the "start of the list" and "start of the cycle": s
    distance between the "start of the list" and "first meeting point": k
    distance between the "start of the cycle" and "first meeting point" m
    
    s=k-m=nr-m= (n-1)r+(r-m) and make n==1 =r-m
    
    so r=s+m. So start from the start from the list
            and start from the meeting point
            
            will meet at the start of the cycle
*/

public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head==null)return head;
		
		ListNode fast=head;
		ListNode slow=head;
		
		while(slow.next!=null && fast.next!=null && fast.next.next!=null){
			slow=slow.next;
			fast=fast.next.next;
			if(slow==fast)
				break;
		}
		if(fast.next==null || fast.next.next==null)return null;
		slow=head;
		while(slow!=fast){
		    slow=slow.next;
		    fast=fast.next;
		}
		return slow;
    }
}

//2015/12/7(not the first time)
/*
  only know how to find if there is cycle
  need to remember the equation of how when meet
*/
