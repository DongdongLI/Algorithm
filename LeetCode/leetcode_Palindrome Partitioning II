/*
 Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

For example, given s = "aab",
Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut. 
*/

/*ideas:
dynamic programming.
cuts[i]: from i to the end, the minimum cut
matrix[i][j]: if subString i to j is palindrome
  1. if i+1=j,and charAt(i)==charAt(j), then yes
  2. if charAt(i)==charAt(j), and matrix[i-1][j+1]==true , then yes
*/
public class Solution {
    public int minCut(String s) {
       if(s==null || s.length()==0)
			return 0;
		
		int len=s.length();
		int cuts[]=new int[len+1];
		boolean matrix[][]=new boolean[len][len];
		
		for(int i=0;i<len;i++)
		{
			cuts[i]=len-i;
		}
		
		for(int i=len-1;i>=0;i--)
		{
			for(int j=i;j<len;j++)
			{
				if(s.charAt(i)==s.charAt(j)&&j-i<2 || matrix[i+1][j-1]==true &&s.charAt(i)==s.charAt(j))
				{
					matrix[i][j]=true;
					cuts[i]=Math.min(cuts[i], cuts[j+1]+1);
				}
			}
		}
		cuts[0]-=1;
		return cuts[0]; 
    }
}
