/*
  Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

  You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.

  Example 1:
  Input:
  ["Shogun", "Tapioca Express", "Burger King", "KFC"]
  ["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
  Output: ["Shogun"]
  Explanation: The only restaurant they both like is "Shogun".
  Example 2:
  Input:
  ["Shogun", "Tapioca Express", "Burger King", "KFC"]
  ["KFC", "Shogun", "Burger King"]
  Output: ["Shogun"]
  Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).
  Note:
  The length of both lists will be in the range of [1, 1000].
  The length of strings in both lists will be in the range of [1, 30].
  The index is starting from 0 to the list length minus 1.
  No duplicates in both lists.
*/

public class Solution {
    public String[] findRestaurant(String[] list1, String[] list2) {
        List<String> mutualList = new ArrayList<>();
        List<String> theOtherList = new ArrayList<>();
        
        Map<String, Integer> interestCount = new HashMap();
        
        for(int i=0;i<list1.length;i++){
            mutualList.add(list1[i]);
            interestCount.put(list1[i], i);
        }
        
        for(int i=0;i<list2.length;i++){
            theOtherList.add(list2[i]);
            if(interestCount.containsKey(list2[i])){
                int originalCount = interestCount.get(list2[i]);
                
                interestCount.put(list2[i], originalCount+i);
            }
        }
        
        mutualList.retainAll(theOtherList);
        
        int smallestCount = Integer.MAX_VALUE;
        Set<String> resSet = new HashSet();
        for(String str: mutualList) {
            if(interestCount.get(str)<smallestCount){
                smallestCount = interestCount.get(str);
                resSet.clear();
                resSet.add(str);
            }
            else if(interestCount.get(str)==smallestCount)
                resSet.add(str);
        }
        
        return resSet.toArray(new String[resSet.size()]);
    }
}
