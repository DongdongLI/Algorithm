/*
  Given an unsorted array of integers, find the length of longest increasing subsequence.

  Example:

  Input: [10,9,2,5,3,7,101,18]
  Output: 4 
  Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
  Note:

  There may be more than one LIS combination, it is only necessary for you to return the length.
  Your algorithm should run in O(n2) complexity.
  Follow up: Could you improve it to O(n log n) time complexity?
*/

class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums == null || nums.length == 0)
            return 0;
        
        int max = 1;
        int[] dp = new int[nums.length];
        // dp[i] is the length of longest increasing sequence if it ends at i
        dp[0] = 1;
        for(int i=1;i<nums.length;i++) {
            // when current element is larger then previous one
            // still need to go back and find the largest previous sequence and 
            // connect to that one
            if(nums[i] > nums[i-1]){
                int j=i-1;
                while(j>=0 && nums[j]<nums[i]){
                    dp[i] = Math.max(dp[i], dp[j]+1);
                    j--;
                }
            }
            // or go back and find a proper previous sequence that can connect
            else{
                int j=i-1;
                while(j>=0 && nums[j]>=nums[i])
                    j--;
                
                if(j<0)
                    dp[i] = 1;
                else
                    dp[i] = dp[j]+1;
            }
            
            max = Math.max(max, dp[i]);
        }
                
        return max;
    }
}
