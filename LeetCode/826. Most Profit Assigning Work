/*
  We have jobs: difficulty[i] is the difficulty of the ith job, and profit[i] is the profit of the ith job. 

  Now we have some workers. worker[i] is the ability of the ith worker, which means that this worker can only complete a job with difficulty at most worker[i]. 

  Every worker can be assigned at most one job, but one job can be completed multiple times.

  For example, if 3 people attempt the same job that pays $1, then the total profit will be $3.  If a worker cannot complete any job, his profit is $0.

  What is the most profit we can make?

  Example 1:

  Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]
  Output: 100 
  Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately.
  Notes:

  1 <= difficulty.length = profit.length <= 10000
  1 <= worker.length <= 10000
  difficulty[i], profit[i], worker[i]  are in range [1, 10^5]
*/

import javafx.util.Pair;
class Solution {
    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {
        // note that diffult job does not necessarily mean more profit,
        // so we need to map them
        List<Pair<Integer, Integer>> jobs = new ArrayList<>();
        
        for(int i=0;i<difficulty.length;i++) {
            jobs.add(new Pair<>(difficulty[i], profit[i]));
        }
        // sort the jobs by difficult first
        Collections.sort(jobs, new Comparator<Pair<Integer, Integer>>(){
            @Override
            public int compare(Pair<Integer, Integer> pair1, Pair<Integer, Integer> pair2){
                if(pair1.getKey() != pair2.getKey())
                    return pair1.getKey() - pair2.getKey();
                return pair1.getValue() - pair2.getValue();
            }
        });
        
        int res = 0;
        
        int curJob = jobs.size()-1;
        
        // i is traversing the list of job, point to the next job where not one yet can do
        int i = 0;
        // maxPro is the current max profit for the worker (he can do the previous job if current is too hard)
        int maxPro = 0;
        Arrays.sort(worker);
        
        for(int ability: worker) {
            while(i<difficulty.length && ability>=jobs.get(i).getKey()) {
                maxPro = Math.max(maxPro, jobs.get(i).getValue());
                i++;
            }
            res+=maxPro;
        }
        
        return res;
    }
}
