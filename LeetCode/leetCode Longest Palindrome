/*
  Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.

  This is case sensitive, for example "Aa" is not considered a palindrome here.

  Note:
  Assume the length of given string will not exceed 1,010.

  Example:

  Input:
  "abccccdd"

  Output:
  7

  Explanation:
  One longest palindrome that can be built is "dccaccd", whose length is 7.  
*/

/*
  Any character with even number of appearances can be used to form the palindrome. 
  If there's any character that showed up only once. It can show up in the middle of the palindrome for the final touch.
*/

public class Solution {
    public int longestPalindrome(String s) {
        
        int len=0;
        
        Map<Character, Integer> map = new HashMap(); 
        char[] token = s.toCharArray();
        for(char c: token){
            if(!map.containsKey(c)){
                map.put(c, 1);
            }
            else if(map.get(c) == 0){
                map.put(c, map.get(c)+1);
            }
            else{
                map.put(c, map.get(c)-1);
                len+=2;
            }
        }
        
        for(char c: map.keySet()){
            if(map.get(c)==1){
                len++;
                break;
            }
        }
        
        return len;
    }
}
