/*Write a program to solve a Sudoku puzzle by filling the empty cells.

Empty cells are indicated by the character '.'.

You may assume that there will be only one unique solution. */
/*
It is similar to N-Queen problem, in each location marked with '.', put '1' to '9' in it and check if it is valid.
If none match, then set it back to '.'.
*/
public class Solution {
    public void solveSudoku(char[][] board) {
        if (board==null||board.length==0)
		      return;
		help(board);
    }
    public boolean help(char[][] board) {
		
		for(int i=0;i<9;i++)
		{
			for(int j=0;j<9;j++)
			{
				if(board[i][j]=='.')
				{
					for(char add='1';add<='9';add++)
					{
						if(isValid(board, i, j, add))
						{
							board[i][j]=add;
							if(help(board))
								return true;
							else
								board[i][j]='.';
						}
					}
					return false;
				}
			}
		}
		return true;
    }
    public boolean isValid(char[][] board,int i,int j,char c)
	{
		for(int row=0;row<9;row++)
		{
			if(board[row][j]==c)
				return false;
		}
		
		for(int column=0;column<9;column++)
		{
			if(board[i][column]==c)
				return false;
		}
		
		for(int row=i/3*3;row<i/3*3+3;row++)
			for(int column=j/3*3;column<j/3*3+3;column++)
			{
				if(board[row][column]==c)
					return false;
			}
		return true;
	}
}
