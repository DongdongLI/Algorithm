/*
  Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.

  Note:

  If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
  All airports are represented by three capital letters (IATA code).
  You may assume all tickets form at least one valid itinerary.
  Example 1:

  Input: [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
  Output: ["JFK", "MUC", "LHR", "SFO", "SJC"]
  Example 2:

  Input: [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
  Output: ["JFK","ATL","JFK","SFO","ATL","SFO"]
  Explanation: Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"].
               But it is larger in lexical order.
*/

class Solution {
    public List<String> findItinerary(String[][] tickets) {
        Map<String, PriorityQueue<String>> map = new HashMap<>();
        // start airport -> [destination 1, destination 2...]
        // priority queue will help to maintain the lexical order
        for(String[] ticket: tickets) {
            if(!map.containsKey(ticket[0]))
                map.put(ticket[0], new PriorityQueue<>());
            map.get(ticket[0]).offer(ticket[1]);
        }
        
        List<String> res = new ArrayList<>();
        dfs("JFK", map, res);
        
        return res;
    }
    
    public void dfs(String cur, Map<String, PriorityQueue<String>> map, List<String> res) {
        while(map.containsKey(cur) && !map.get(cur).isEmpty())
            dfs(map.get(cur).poll(), map, res);
        res.add(0, cur);
    }
}
