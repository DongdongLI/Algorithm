/*
 Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example,
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!
*/

/*ideas:
Rain amount for each i: min(highest height from the far left  to i, highest height from the far right to i)-A[i]

Use Dynamic programming to get the left[i] and right[i]
*/

public class Solution {
    public int trap(int[] A) {
        if(A==null || A.length==0)return 0;
		
		int left[]=new int[A.length];
		int[] right=new int[A.length];
		
		left[0]=A[0];
		for(int i=1;i<A.length;i++)
		{
			left[i]=Math.max(A[i], left[i-1]);
		}
		
		right[A.length-1]=A[A.length-1];
		for(int i=A.length-2;i>=0;i--)
		{
			right[i]=Math.max(right[i+1], A[i]);
		}
		
		int total=0;
		for(int i=0;i<A.length;i++)
		{
			total+=Math.min(left[i], right[i])-A[i];
		}
		return total;
    }
}
// 2015/12/22: totally forgot;

public class Solution {
    public int trap(int[] height) {
        if(height==null || height.length==0)
            return 0;
        
        int l=0; // left pointer
		int r=height.length-1; // right pointer
		// the global highest left border
		int leftMax=0;
		// the global highest right border
		int rightMax=0;
		
		int max=0;
		// start moving
		while(l<r){
		    // update the borders.
			leftMax=Math.max(leftMax, height[l]);
			rightMax=Math.max(rightMax, height[r]);
			if(leftMax<rightMax){
			    // left border is shorter, indicating that the water in left pointer can be stored, but not sure about the right pointer
				max+=leftMax-height[l];
				// move forward
				l++;
			}else{
				max+=rightMax-height[r];
				r--;
			}
		}
		return max;
    }
}
