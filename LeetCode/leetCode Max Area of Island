/*
  Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

  Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)

  Example 1:
  [[0,0,1,0,0,0,0,1,0,0,0,0,0],
   [0,0,0,0,0,0,0,1,1,1,0,0,0],
   [0,1,1,0,1,0,0,0,0,0,0,0,0],
   [0,1,0,0,1,1,0,0,1,0,1,0,0],
   [0,1,0,0,1,1,0,0,1,1,1,0,0],
   [0,0,0,0,0,0,0,0,0,0,1,0,0],
   [0,0,0,0,0,0,0,1,1,1,0,0,0],
   [0,0,0,0,0,0,0,1,1,0,0,0,0]]
  Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.
  Example 2:
  [[0,0,0,0,0,0,0,0]]
  Given the above grid, return 0.
  Note: The length of each dimension in the given grid does not exceed 50.
*/

/*
  To avoid revisiting the same spot, use boolean[][] visited to mark a cell as visted after accessing it.
  
  I think it is DFS question, for each point equals to 1, go check its neighbors above, below, to the left ,to the right and see if they
  are land as well, go as far as possible and mark thoses places as visited = true.
  
  return 1 + getArea(m-1, n, grid, visited) 
            + getArea(m, n-1, grid, visited) 
            + getArea(m+1, n, grid, visited) 
            + getArea(m, n+1, grid, visited);
*/

class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        
        if(grid == null || grid[0].length==0)return 0;
        
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        int max = 0;
        
        int m = grid.length;
        int n = grid[0].length;
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
              if(grid[i][j]==1)
                max = Math.max(max, getArea(i, j, grid, visited));
            }
        }
        
        return max;
    }
    
    public int getArea(int m, int n, int[][] grid, boolean[][] visited) {
        if( m<0||m==grid.length || n<0 || n==grid[0].length || visited[m][n] || grid[m][n] == 0)
            return 0;
        
        visited[m][n] = true;
        return 1 + getArea(m-1, n, grid, visited) 
            + getArea(m, n-1, grid, visited) 
            + getArea(m+1, n, grid, visited) 
            + getArea(m, n+1, grid, visited);
    }
}
