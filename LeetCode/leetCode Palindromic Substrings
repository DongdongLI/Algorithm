/*
  Given a string, your task is to count how many palindromic substrings in this string.

  The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

  Example 1:
  Input: "abc"
  Output: 3
  Explanation: Three palindromic strings: "a", "b", "c".
  Example 2:
  Input: "aaa"
  Output: 6
  Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
*/

/*
  The trivial idea is to check all (1+n)*n/2 substrings, which does not work apparently.
  
  The trick is try to build them from each index, which is a lot faster.
*/

class Solution {
    int res = 0;
    public int countSubstrings(String s) {
        // start building from each index
        for(int i=0;i<s.length();i++){
            // aba
            build(s, i, i);
            //abba
            build(s, i, i+1);
        }
        
        return res;
    }
    
    public void build(String s, int l, int r) {
        while(l>=0 && r<=s.length()-1 && s.charAt(l) == s.charAt(r)){
            res++;
            l--;
            r++;
        }
    }
}
