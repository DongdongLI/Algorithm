/*
  You are given two arrays (without duplicates) nums1 and nums2 where nums1â€™s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.

  The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.

  Example 1:
  Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
  Output: [-1,3,-1]
  Explanation:
      For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
      For number 1 in the first array, the next greater number for it in the second array is 3.
      For number 2 in the first array, there is no next greater number for it in the second array, so output -1.
  Example 2:
  Input: nums1 = [2,4], nums2 = [1,2,3,4].
  Output: [3,-1]
  Explanation:
      For number 2 in the first array, the next greater number for it in the second array is 3.
      For number 4 in the first array, there is no next greater number for it in the second array, so output -1.
  Note:
  All elements in nums1 and nums2 are unique.
  The length of both nums1 and nums2 would not exceed 1000.
*/

/*
  Long story short, I need to :
  For each element in the first array,
  1. find where it is in the second array,
  2. start from that spot to right of it and find first element that is larger than the candidate
  
  To quickly access where is a element, and what is it sitting in a specific spot, we can use maps...
*/

public class Solution {
    public int[] nextGreaterElement(int[] findNums, int[] nums) {
        Map<Integer, Integer> numToIndex = new HashMap<Integer,Integer>();
        Map<Integer, Integer> indexToNum = new HashMap<Integer,Integer>();
        
        // put data in the map so we can find the index of each element
        for(int i=0;i<nums.length;i++){
            numToIndex.put(nums[i], i);
            indexToNum.put(i,nums[i]);
        }
        
        // the result and the helper pointer
        int[] res = new int[findNums.length];
        int j=0;
        
        // for every element of the first array
        for(int i:findNums){
            // find where it is in arr2
            int indexInNums2 = numToIndex.get(i);
            // start from the index next to it
            int ind = indexInNums2+1;
            // find the first element who is larger till the end of the array
            while(ind<nums.length && indexToNum.get(ind) <= i )
                ind++;
            
            // figure out if we find one or not.
            if(ind == nums.length)
                res[j++]=-1;
            else
                res[j++]=nums[ind];
        }
        
        return res;
    }
}
