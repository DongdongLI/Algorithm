/*
Given a string containing only digits, restore it by returning all possible valid IP address combinations.

For example:
Given "25525511135",

return ["255.255.11.135", "255.255.111.35"]. (Order does not matter) 
*/

/*ideas
1.each segment can be formed by 1, 2 or 3 characters.
2.dfs()idea
*/

public class Solution {
    public ArrayList<String> restoreIpAddresses(String s) {
        if(s==null || s.length()==0 || s.length()<4||s.length()>12)
        	return new ArrayList<String>();
        ArrayList<String> result=new ArrayList<String>();
        dfd(s,"",result,0);
        return result;
    }
	public boolean isValid(String s)
	{
		if(s.charAt(0)=='0')
			return (s.equals("0"));
		int temp=Integer.parseInt(s);
		return (temp<=255&&temp>=1);
	}
	
	public void dfd(String s,String temp,ArrayList<String> result,int count)
	{
		if(count==3&& isValid(s))
		{
			result.add(temp+s);
			return;
		}
		for(int i=1;i<4&&i<s.length();i++)
		{
			String sub=s.substring(0, i);
			if(isValid(sub))
			{
				dfd(s.substring(i),temp+sub+".",result,count+1);
			}
		}
	}
}
