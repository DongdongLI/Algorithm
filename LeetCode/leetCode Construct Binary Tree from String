/*
  You need to construct a binary tree from a string consisting of parenthesis and integers.

  The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.

  You always start to construct the left child node of the parent first if it exists.

  Example:
  Input: "4(2(3)(1))(6(5))"
  Output: return the tree root node representing the following tree:

         4
       /   \
      2     6
     / \   / 
    3   1 5   
  Note:
  There will only be '(', ')', '-' and '0' ~ '9' in the input string.
  An empty tree is represented by "" instead of "()".
*/

/*
for each substring
  get the root
  get the left
  get the right
  
  use the indexOf to quickly locate the left parentheses
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode str2tree(String s) {
        if(s==null||s.length()==0||s.equals(""))return null;
        
        int firstLeft = s.indexOf("(");
        Integer rootVal = (firstLeft==-1) ? Integer.parseInt(s):Integer.parseInt(s.substring(0,firstLeft));
        
        TreeNode root = new TreeNode(rootVal);
        if(firstLeft==-1)return root;
                
        int leftNum = 0;
        int start = firstLeft;
        for(int i=start;i<s.length();i++){
            if(s.charAt(i)=='(')
                leftNum++;
            else if(s.charAt(i)==')')
                leftNum--;
            if(leftNum == 0 && start==firstLeft){//found the left
                root.left = str2tree(s.substring(start+1, i));
                start = i+1;
            }
            else if(leftNum == 0) // found the right
                root.right = str2tree(s.substring(start+1, i));
        }
        
        return root;
    }
}
