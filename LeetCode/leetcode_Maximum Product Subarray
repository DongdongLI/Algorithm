/*
 Find the contiguous subarray within an array (containing at least one number) which has the largest product.

For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6. 
*/


/*Ideas:
1.For example, [2,-6,-3]. If we see -6 and decide to skip it directly, we can never get the right answer because we can 
get the largest product by multiple -12 to -3.
2.Therefore, we keep a variable global to keep the largest product, localmax to keep the local largest product and localmin 
to keep the local minimum.
3.In this case, we can avoid the situation we discussed above.
*/


public class Solution {
    public int maxProduct(int[] A) {
        if(A==null|| A.length==0)return 0;
        else if(A.length==1)return A[0];
		int global=A[0];
        int localmax=A[0];
        int localmin=A[0];
        
        for(int i=1;i<A.length;i++)
        {
        	int temp=localmax;
        	localmax=Math.max(Math.max(localmax*A[i], A[i]), A[i]*localmin);
        	localmin=Math.min(Math.min(temp*A[i], A[i]),A[i]* localmin);
        	global=Math.max(localmax, global);
        }
        return global;
    }
}
//2015/12/21: Complete forgot. new method
public class Solution {
    public int maxProduct(int[] nums) {
        if(nums.length==0)
			return 0;
		else if(nums.length==1)return nums[0];
		int maxherepre=nums[0]; // max product before current index
		int minherepre=nums[0]; // min product before current index
		int maxsofar=nums[0]; // the globol max prodduct
		
		int maxhere=0; // local max product
		int minhere=0; // local min product
		for(int i=1;i<nums.length;i++){
			maxhere=Math.max(Math.max(maxherepre*nums[i], minherepre*nums[i]), nums[i]);//get local max
			minhere=Math.min(Math.min(maxherepre*nums[i], minherepre*nums[i]),nums[i]);// get local min
			
			maxsofar=Math.max(maxsofar, maxhere); // update max
			maxherepre=maxhere; // update premax and premin
			minherepre=minhere;
		}
		return maxsofar; 
    }
}
