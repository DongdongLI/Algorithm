/*
  Given n points in the plane that are all pairwise distinct, a "boomerang" is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).

  Find the number of boomerangs. You may assume that n will be at most 500 and coordinates of points are all in the range [-10000, 10000] (inclusive).

  Example:
  Input:
  [[0,0],[1,0],[2,0]]

  Output:
  2

  Explanation:
  The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]
*/

/*
  If one of the points (A) has the distance with 4 other points, then A, with any two of the group of points, can form a boomerang.
  
  So that is C(n,2). which is 4*(4-1) = 12.
*/

public class Solution {
    public int numberOfBoomerangs(int[][] points) {
        int res=0;
        Map<Integer, Integer> distance = new HashMap();
        int len = points.length;
        for(int i=0;i<len;i++){
            for(int j=0;j<len;j++){
                if(i==j)continue;
                
                int dist = dis(points[i], points[j]);
                
                if(distance.containsKey(dist) )
                    distance.put(dist, distance.get(dist)+1);
                else
                    distance.put(dist, 1);
            }
            for(int val: distance.values())
                res+= val*(val-1);
            distance.clear();
        }
        return res;
    }
    
    public int dis(int[] x, int[] y){
        return (x[0]-y[0])*(x[0]-y[0])+(x[1]-y[1])*(x[1]-y[1]);
    }
}
