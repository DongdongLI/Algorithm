/*
 Given a sorted linked list, delete all duplicates such that each element appear only once.

For example,
Given 1->1->2, return 1->2.
Given 1->1->2->3->3, return 1->2->3. 
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 /*Ideas:
 Two pointers, one following the other
 */
 
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        //second time
    	if(head==null || head.next==null)
			return head;
		
		ListNode i=head;
		ListNode j=head.next;
		while(j!=null)
		{
			if(i.val!=j.val)
			{
				i=j;
				j=j.next;
			}
			else
			{
				i.next=j.next;
				j=j.next;
			}
		}
		return head;
    }
}
//2015/12/5: nail it
/*
	two pointers, the slower one marks the end of the list without duplicate, and the fast one marks the next node that will not 
	cause duplicates.
*/
