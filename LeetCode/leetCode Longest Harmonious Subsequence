/*
  We define a harmonious array is an array where the difference between its maximum value and its minimum value is exactly 1.

  Now, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible subsequences.

  Example 1:
  Input: [1,3,2,2,5,2,3,7]
  Output: 5
  Explanation: The longest harmonious subsequence is [3,2,2,2,3].
  Note: The length of the input array will not exceed 20,000.
*/

/*
  subsequences: As long as the order remains the same, any potential sub-list is applied.
  
  So basically the result the the two numbers that appeared most frequently.
*/

/*
  Use a map the track how many times each number has appear
  Use Priority Queue to sort the map entries based on the time they appear
  loop through the entry and find max
*/

class Solution {
    public int findLHS(int[] nums) {
        Map<Integer, Integer> numCount = new HashMap<>();
        for(int num: nums){
            if(!numCount.containsKey(num))
                numCount.put(num, 1);
            else
                numCount.put(num, numCount.get(num)+1);
        }
        
        PriorityQueue<Map.Entry<Integer, Integer>> queue = new PriorityQueue<Map.Entry<Integer, Integer>>(new Comparator<Map.Entry<Integer, Integer>>(){
           public int compare(Map.Entry<Integer, Integer> e1, Map.Entry<Integer, Integer> e2){
               return e2.getValue()-e1.getValue();
           } 
        });
        
        for(Map.Entry e: numCount.entrySet()){
            queue.offer(e);
        }
                
        Set<Integer> keys = new HashSet<>();
        
        int max = 0;
        
        while(!queue.isEmpty()){
            Map.Entry<Integer, Integer> entry = queue.poll();
            
            if(!keys.isEmpty()){
                
                if(keys.contains(entry.getKey()+1))
                    max = Math.max(entry.getValue() + numCount.get(entry.getKey()+1), max); 
                if(keys.contains(entry.getKey()-1))
                    max = Math.max(entry.getValue() + numCount.get(entry.getKey()-1), max); 
            }
            keys.add(entry.getKey());
           
        }
        
        return max;
    }
}
