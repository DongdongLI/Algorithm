/*
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3

The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25. 
*/

/*
hint: add 10*root.val to both its left child(if any) and right child(if any)
*/

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */public class Solution {//second
    public  int sumNumbers(TreeNode root)
	{
		int result[]={0};
		if(root==null)return result[0];
		helper(root,result);
		return result[0];
	}
	public void helper(TreeNode root,int []result)
	{
		if(root.left!=null)
		{
			root.left.val+=root.val*10;
			helper(root.left,result);
		}
		if(root.right!=null)
		{
			root.right.val+=root.val*10;
			helper(root.right,result);
		}
		if(root.left==null&&root.right==null)
		{
			result[0]+=root.val;
		}
	}
	
    }
