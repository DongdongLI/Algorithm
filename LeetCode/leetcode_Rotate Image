/*
  You are given an n x n 2D matrix representing an image.
  
  Rotate the image by 90 degrees (clockwise).
  
  Follow up:
  Could you do this in-place?
*/

// naive solution(m*n extra space needed)
public void rotate(int[][] matrix) {
		int m=matrix.length;
		int n=matrix[0].length;
		
		int[][] backup=new int[m][n];
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++){
				backup[j][n-1-i]=matrix[i][j];
			}
		}
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++){
				matrix[i][j]=backup[i][j];
			}
		}
}

// an easy in place solution.
// reflex and reverse
public class Solution {
    public void rotate(int[][] matrix) {
        int m=matrix.length;
		int n=matrix[0].length;
		
		// reflect, change [i][j] to [j][i]
		for(int i=0;i<m;i++){
			for(int j=i;j<n;j++){
				int temp=matrix[i][j];
				matrix[i][j]=matrix[j][i];
				matrix[j][i]=temp;
			}
		}
		
		// reverse each row
		for(int i=0;i<m;i++){
			for(int j=0;j<n/2;j++){
				int temp=matrix[i][j];
				matrix[i][j]=matrix[i][n-1-j];
				matrix[i][n-1-j]=temp;
			}
		}
    }
}
