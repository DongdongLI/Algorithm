/*
  Write a program to find the node at which the intersection of two singly linked lists begins.


  For example, the following two linked lists:
  
  A:          a1 → a2
                     ↘
                       c1 → c2 → c3
                     ↗            
  B:     b1 → b2 → b3
  begin to intersect at node c1.
  
  
  Notes:
  
  If the two linked lists have no intersection at all, return null.
  The linked lists must retain their original structure after the function returns.
  You may assume there are no cycles anywhere in the entire linked structure.
  Your code should preferably run in O(n) time and use only O(1) memory.
*/
/*
  Idea:
    Two lists may not have the same length, but if they have intersection, they will surely end together.
    (After the intersection, they become 1 list)
    
    get the length of the two lists.
    p1, p2 , the pointers
    move the longer one's pointer few steps first
    
    start moving together
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode p1=headA;
        ListNode p2=headB;
        
        int len1=0;
        int len2=0;
        
        while(p1!=null){
        	len1++;
        	p1=p1.next;
        }
        while(p2!=null){
        	len2++;
        	p2=p2.next;
        }
        
        p1=headA;
        p2=headB;
        
        if(len1<len2){
        	int steps=len2-len1;
        	for(int i=0;i<steps;i++)
        		p2=p2.next;
        }else if(len1>len2){
        	int steps=len1-len2;
        	for(int i=0;i<steps;i++)
        		p1=p1.next;
        }
        
        while(p1!=null && p2!=null){
        	if(p1==p2)
        		return p1;
        	p1=p1.next;
        	p2=p2.next;
        }
        return null;
    }
}
//2015/12/5: nail it.
// not the first time to do it


/*
  There's a why that we don't have to know the length. (hint: lenA+lenB = lenB+lenA)
  two pointers start at each list, when reach the end, start at the other list
*/
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null)
            return null;
        
        ListNode n1 = headA;
        ListNode n2 = headB;
        
        // when n1 gets to the end of list1, start at list2, when n2 gets to the end of list2, start at list1
        while(n1 != n2){
            // eventually they will either meet at the intersection, or will both be null, so while loop will end.
            n1 = (n1 == null ? headB : n1.next);
            n2 = (n2 == null ? headA : n2.next);
        }
        
        return n1;
    }
}
