/*
  Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

  For example,
  Given n = 3, there are a total of 5 unique BST's.
  
     1         3     3      2      1
      \       /     /      / \      \
       3     2     1      1   3      2
      /     /       \                 \
     2     1         2                 3
*/

/*
Idea:

G(n): number of binary search tree can be generated from 1 to n
F(i,n): number of binary search trees can be generated from 1 to n when i is the root

easy to conclude that

G(n)=F(1,n)+F(2,n)+F(3,n)+...+F(n-1,n)+F(n,n)

for one particular root, the total number of trees it can come up with is: (num of left trees) * (num of right trees)
So
  F(i,n)=G(1,i-1) * G(i+1,n)
  
So
  G(n) = G(0) * G(n-1) + G(1) * G(n-2) + â€¦ + G(n-1) * G(0) 
*/

public class Solution {
	public int maxProfit(int n) {
		int[] dp=new int[n+1];
		// for empty tree or the tree with only one node
		dp[0]=1;
		dp[1]=1;
		
		for(int i=2;i<n+1;i++){
			for(int j=0;j<=i;j++){
				dp[i]+=dp[j]*dp[i-j];
			}
		}
		return dp[n];
    }
}
