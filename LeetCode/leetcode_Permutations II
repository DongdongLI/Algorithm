/*
 Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[1,1,2], [1,2,1], and [2,1,1]. 
*/
//Use set to eliminate the duplicate ones
public class Solution {
    public ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
        if(num==null || num.length==0)
		return new ArrayList<ArrayList<Integer>>();
		ArrayList<ArrayList<Integer>> result=new ArrayList<ArrayList<Integer>>();
		result.add(new ArrayList<Integer>());
		for(int i=0;i<num.length;i++)
		{
		Set<ArrayList<Integer>> current=new HashSet<ArrayList<Integer>>();
		for(ArrayList<Integer> temp:result)
		{
		for(int j=0;j<temp.size()+1;j++)
		{
		temp.add(j, num[i]);
		ArrayList<Integer> temp1=new ArrayList<Integer>(temp);
		current.add(temp1);
		temp.remove(j);
		}
		}
		result=new ArrayList<ArrayList<Integer>>(current);
		}
		return result;
    }
}


//second solution
//去重处理：前一个元素和当前元素一样，且前一个元素已经被访问过，没关系。前一个元素和当前元素一样，且前一个元素已经没有被访问过
//，跳过当前元素
public class Solution {
    public ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
		if (num == null || num.length == 0)
			return new ArrayList<ArrayList<Integer>>();
		ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
		ArrayList<Integer> temp = new ArrayList<Integer>();
		Arrays.sort(num);
		boolean visited[] = new boolean[num.length];
		help(num, result, temp, visited,0);
		return result;
	}

	public void help(int num[], ArrayList<ArrayList<Integer>> result,ArrayList<Integer> temp, boolean visited[],int start)
	{
		if (temp.size() == num.length) {
			result.add(new ArrayList<Integer>(temp));
		}
		
		for (int i = start; i < visited.length; i++) {
			if(i>0&&num[i]==num[i-1]&&visited[i-1]==false)
				continue;
			
			if (visited[i] == false) {
				temp.add(num[i]);
				visited[i] = true;
				help(num, result, temp, visited,start);
				visited[i] = false;
				temp.remove(temp.size() - 1);
			}
		}
	}
}
// 2015.8.2 refresh: remember exact the first solution
	/*
		Manually avoid duplicate:
		  * sort the array
		  * only exception from the Permutation 1:
		  	if current element is the same as the last one, and the last one is visited already, then skip it.
		  	
		  	code:
		  	
		  	if(!(i>=1 &&nums[i]==nums[i-1]&&used[i-1] ||used[i] ))
	*/
