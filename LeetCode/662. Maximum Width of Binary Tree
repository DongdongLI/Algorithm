/*
  Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.

  The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

  Example 1:
  Input: 

             1
           /   \
          3     2
         / \     \  
        5   3     9 

  Output: 4
  Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
  Example 2:
  Input: 

            1
           /  
          3    
         / \       
        5   3     

  Output: 2
  Explanation: The maximum width existing in the third level with the length 2 (5,3).
  Example 3:
  Input: 

            1
           / \
          3   2 
         /        
        5      

  Output: 2
  Explanation: The maximum width existing in the second level with the length 2 (3,2).
  Example 4:
  Input: 

            1
           / \
          3   2
         /     \  
        5       9 
       /         \
      6           7
  Output: 8
  Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).


  Note: Answer will in the range of 32-bit signed integer.

*/

class Solution {
    int max = 1;
    public int widthOfBinaryTree(TreeNode root) {
        if(root == null)
            return 0;
        
        helper(root, 0, 1, new ArrayList<>());
        
        return max;
    }
    
    public void helper(TreeNode node, int level, int index, List<Integer> startOfEachLevel){
        if(node == null)
            return;
        
        // the start index of current level has not yet been added
        if(startOfEachLevel.size() == level)
            startOfEachLevel.add(index);
        
        // update the max width by comparing max with "current index - current level start point"
        max = Math.max(max, index - startOfEachLevel.get(level ) +1 );
        helper(node.left, level+1, index*2, startOfEachLevel);
        helper(node.right, level+1, index*2+1, startOfEachLevel);
    }
}
