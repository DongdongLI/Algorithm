/*
    Delete Node in a Linked List
    Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.

    Supposed the linked list is 1 -> 2 -> 3 -> 4 and you are given the third node with value 3, the linked list should 
    become 1 -> 2 -> 4 after calling your function.
*/

/*
    Strightforward idea: start from the target, change the value of each node, delete the last one

    Easier way: cut the copy part: just copy one value and then skip the node
*/

public class Solution {
    public void deleteNode(ListNode node) {
      	ListNode p=node;
        while(p.next!=null && p.next.next!=null){
        	p.val=p.next.val;
        	p=p.next;
        }
        p.val=p.next.val;
        p.next=null;
    }
}
 class ListNode {
	      int val;
	      ListNode next;
	      ListNode(int x) { val = x; }
	  }
// method 2
public class Solution {
    public void deleteNode(ListNode node) {
      	node.val=node.next.val;
      	node.next=node.next.next;
    }
}
//2015/12/4: Read the answer and the memory comes back.
//since the current node is considered to be deleted, put the value of next node in current node, and skip the next node.
// Then it looks like the current node is deleted.
