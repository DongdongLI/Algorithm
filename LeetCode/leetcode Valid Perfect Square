/*
  Given a positive integer num, write a function which returns True if num is a perfect square else False.

  Note: Do not use any built-in library function such as sqrt.

  Example 1:

  Input: 16
  Returns: True
  Example 2:

  Input: 14
  Returns: False
*/

/*
  Following is a trivial solution:
  
  Use long to prevent overflow.
  
  basically use binary search to look for squre root from 1 to num
*/

// the other solution: 1+3+5+7+... = n*n 

public class Solution {
    public boolean isPerfectSquare(int num) {
        return binarySearch(1,((num/2 == 0)?num:num/2),num) || binarySearch(((num/2 == 0)?num:num/2),num,num);
    }
    
    public boolean binarySearch(long low, long high, long num) {
        
        if(low>high)return false;
        
        long mid = low+(high-low)/2;
        
        if(mid*mid == num){
            return true;
        }
        else if(mid*mid<num){
            return binarySearch(mid+1, high, num);
        }
        else{
            return binarySearch(low, mid-1, num);
        }
    }
}
