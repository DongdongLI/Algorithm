/*
  Given a string of numbers and operators, return all possible results from computing all the different possible ways to 
  group numbers and operators. The valid operators are +, - and *.


  Example 1
  Input: "2-1-1".
  
  ((2-1)-1) = 0
  (2-(1-1)) = 2
  Output: [0, 2]
  
  
  Example 2
  Input: "2*3-4*5"
  
  (2*(3-(4*5))) = -34
  ((2*3)-(4*5)) = -14
  ((2*(3-4))*5) = -10
  (2*((3-4)*5)) = -10
  (((2*3)-4)*5) = 10
  Output: [-34, -14, -10, -10, 10]
*/

/*
  There is nothing about adding parenthesis, just about the order of calculations
*/

public class Solution {
    public List<Integer> diffWaysToCompute(String input) {
    	List<Integer> res=new ArrayList<Integer>();
    	
    	for(int i=0;i<input.length();i++){
    		char c=input.charAt(i);
    		if(c=='+' || c=='-' || c=='*'){ // divide the expression to two parts, before and after the operator
    			String before=input.substring(0,i);
    			String after=input.substring(i+1);
    			List<Integer> res1=diffWaysToCompute(before); // calculate them seperately
    			List<Integer> res2=diffWaysToCompute(after);
    			
    			for(Integer i1:res1){
    				for(Integer i2:res2){
    					int temp=0; // based on the operator, get the result for all the combinations
    					switch (c) {
    						case '+':
    							temp=i1+i2;
							break;
							case '-':
								temp=i1-i2;
							break;
							case '*':
								temp=i1*i2;	
							break;

							default:
								break;
						}
    					res.add(temp);
    				}
    			}
    		}
    	}
    	if(res.size()==0) // this means there is only one number in "input" and there is no operator
    		res.add(Integer.valueOf(input));
    	return res;
    }
}
