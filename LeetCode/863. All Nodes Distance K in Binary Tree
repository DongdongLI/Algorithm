/*
  We are given a binary tree (with root node root), a target node, and an integer value K.

  Return a list of the values of all nodes that have a distance K from the target node.  The answer can be returned in any order.



  Example 1:

  Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2

  Output: [7,4,1]

  Explanation: 
  The nodes that are a distance 2 from the target node (with value 5)
  have values 7, 4, and 1.



  Note that the inputs "root" and "target" are actually TreeNodes.
  The descriptions of the inputs above are just serializations of these objects.


  Note:

  The given tree is non-empty.
  Each node in the tree has unique values 0 <= node.val <= 500.
  The target node is a node in the tree.
  0 <= K <= 1000.

*/

class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        Map<TreeNode, Integer> map = new HashMap<>();
        List<Integer> res = new ArrayList<>();
        
        findDistance(root, target, map);
        dfs(root, target, 0, K, map, res);
        
        return res;
    }
    
    /*
        on the path from root to target, find the distance of all nodes to target
    */
    public int findDistance(TreeNode root, TreeNode target, Map<TreeNode, Integer> map) {
        if(root == null)return -1;
        if(root == target) {
            map.put(root, 0);
            return 0;
        }
        int left = findDistance(root.left, target, map);
        if(left>=0){
            map.put(root, left+1);
            return left+1;
        }
        int right = findDistance(root.right, target, map);
        if(right>=0){
            map.put(root, right+1);
            return right+1;
        }
        
        return -1;
    }
    // with the distance map, we find the nodes with distance of K
    public void dfs (TreeNode node, TreeNode target, int length, int K, Map<TreeNode, Integer> map, List<Integer> res) {
        if(node == null)return;
        if(map.containsKey(node))
            length = map.get(node);
        if(length == K)
            res.add(node.val);
        
        dfs(node.left, target, length+1, K, map, res);
        dfs(node.right, target, length+1, K, map, res);
    }
}
