/*
  Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

  Find all the elements of [1, n] inclusive that do not appear in this array.

  Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

  Example:

  Input:
  [4,3,2,7,8,2,3,1]

  Output:
  [5,6]
*/

/*
  Trivia solution: 
  
  Use a boolean array to mark which number has show up
  second round:
    go through the boolean array and find those missing ones.
*/

public class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        boolean[] arr = new boolean[nums.length];
        
        for(int num: nums){
            arr[num-1] = true;
        }
        
        List<Integer> res = new ArrayList<Integer>();
        
        for(int i=0;i<arr.length;i++){
            if(arr[i]==false)
                res.add(i+1);
        }
        
        return res;
    }
}

/*
  Then how do we save some extra space?
  
  We can use negative value to mark those spots we have visited. 
  1. we can still get the next index
  2. we can find out if we have been here or not.
*/
public class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> res = new ArrayList<Integer>();
        
        for(int i=0;i<nums.length;i++){
            int val = Math.abs(nums[i]) - 1;
            if(nums[val]>0)
                nums[val] = -nums[val];
        }
        
        for(int i=0;i<nums.length;i++){
            if(nums[i]>0)
                res.add(i+1);
        }
        
        return res;
    }
}
