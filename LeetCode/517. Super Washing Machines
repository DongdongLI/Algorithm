/*
  `You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.

  For each move, you could choose any m (1 ≤ m ≤ n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time .

  Given an integer array representing the number of dresses in each washing machine from left to right on the line, you should find the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.

  Example1

  Input: [1,0,5]

  Output: 3

  Explanation: 
  1st move:    1     0 <-- 5    =>    1     1     4
  2nd move:    1 <-- 1 <-- 4    =>    2     1     3    
  3rd move:    2     1 <-- 3    =>    2     2     2   
  Example2

  Input: [0,3,0]

  Output: 2

  Explanation: 
  1st move:    0 <-- 3     0    =>    1     2     0    
  2nd move:    1     2 --> 0    =>    1     1     1    
*/

/*
  for example:
  [0,0,11,5], so target is 4
  transform to gain/loss: 
  -4, -4, 7, 1
  
  now we want all of them 0, start moving load to the right
  0, -8, 7, 1
  
  the final result is determined by abs(totalLoadTransfer), and each individual load transfer(load-target)
*/

class Solution {
    public int findMinMoves(int[] machines) {
        int total = 0;
        for(int i=0;i<machines.length;i++){
            total += machines[i];
        }
        
        int maxVal = 0;
        
        int totalLoadTransfer = 0;
        
        if(total%machines.length != 0)
            return -1;
        int target = total/machines.length;
        
        for(int i=0;i<machines.length;i++){
            int load = machines[i];
            totalLoadTransfer += load-target;
            maxVal = Math.max(maxVal, Math.max(Math.abs(totalLoadTransfer), load-target));
        }
        
        
        return maxVal;
    }
}
