/*
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.
*/

/*ideas
dynamic programming:
s[i][j] stands for the minimum path from [0][0] to [i][j]. Since we can only move to right or down, s[i][j]=min(s[i-1][j]+grid[i][j],s[i][j-1]+grid[i][j])
*/
public class Solution {
    public int minPathSum(int[][] grid) {
        if(grid==null||grid.length==0)
			return 0;
		int m=grid.length;
		//System.out.println("m:"+m);
		int n=grid[0].length;
		//System.out.println("n:"+n);
		int[][] s=new int[m][n];
		
		for(int i=0;i<m;i++)
		{
			if(i==0)
				s[i][0]=grid[i][0];
			else
				s[i][0]=s[i-1][0]+grid[i][0];
		}
		for(int i=0;i<n;i++)
		{
			if(i==0)
				s[0][i]=grid[0][i];
			else
				s[0][i]=s[0][i-1]+grid[0][i];
		}
		
		for(int i=1;i<m;i++)
		{
			for(int j=1;j<n;j++)
			{
				s[i][j]=Math.min(s[i-1][j]+grid[i][j], s[i][j-1]+grid[i][j]);
				//System.out.println("S"+i+" "+j+s[i][j]);
			}
		}
		
		
		return s[m-1][n-1];
    }
}
//2015/12/20: nail it! gone forever!
