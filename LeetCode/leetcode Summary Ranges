
/*
    Given a sorted integer array without duplicates, return the summary of its ranges.
    For example, given [0,1,2,4,5,7], return ["0->2","4->5","7"].
*/

public class Solution {
    public List<String> summaryRanges(int[] nums) {
        List<String> result=new ArrayList<String>();
    	if(nums==null || nums.length==0)
    		return result;
    	
    	int rangeLeft=0;
    	int rangeRight=0;
    	int i=0;
    	
    	for(;i<nums.length;i++)
    	{
    		if(rangeRight+1<nums.length&&nums[rangeRight+1]==nums[rangeRight]+1){
    			rangeRight++;
    		}
    		else{
    			if(rangeLeft==rangeRight){
    				result.add(nums[rangeLeft]+"");
    				rangeLeft++;
    				rangeRight++;
    			}else{
    				result.add(nums[rangeLeft]+"->"+nums[rangeRight]);
    				
    				rangeLeft=rangeRight+1;
    				rangeRight=rangeLeft;
    			}
    		}
    	}
    	
    	return result;
    }
}
//2015/12/11: completely forget
//new solution
/*
	one pass
	
	one cursor i.
	
	
*/
public class Solution {
    public List<String> summaryRanges(int[] nums) {
        List<String> res=new LinkedList<>();
		if(nums==null ||nums.length==0)return res;
		
		for(int i=0;i<nums.length;i++){
		    // start value of each round
			int a=nums[i];
			while(i+1<nums.length && nums[i+1]==nums[i]+1){ // check the bound, and if the value is right, keep moving
				i++;
			}
			
			if(nums[i]==a){ meaning the next value next to a does not equal to a+1
				res.add(a+"");
				
			}else{
				res.add(a+"->"+nums[i]);
			}
		}
		return res;
    }
}
