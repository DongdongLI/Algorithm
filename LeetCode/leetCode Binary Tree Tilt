/*
Given a binary tree, return the tilt of the whole tree.

The tilt of a tree node is defined as the absolute difference between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.

The tilt of the whole tree is defined as the sum of all nodes' tilt.

Example:
Input: 
         1
       /   \
      2     3
Output: 1
Explanation: 
Tilt of node 2 : 0
Tilt of node 3 : 0
Tilt of node 1 : |2-3| = 1
Tilt of binary tree : 0 + 0 + 1 = 1
Note:

The sum of node values in any subtree won't exceed the range of 32-bit integer.
All the tilt values won't exceed the range of 32-bit integer.
*/

/*
  This is the most trivial solution and very slow.
  
  for the root node, get its tilt directly. For its left child and right child however, call the function recursively
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int findTilt(TreeNode root) {
        if(root==null)return 0;
        return tiltForNode(root)+findTilt(root.left)+findTilt(root.right);
    }
    
    public int tiltForNode(TreeNode node){
        if(node == null || node.left==null&&node.right==null)
            return 0;
        return Math.abs(sum(node.left)-sum(node.right));
    }
    
    public int sum(TreeNode node){
        if(node == null)
            return 0;
        else
            return node.val+sum(node.left)+sum(node.right);
    }
}
/*
         Better solution
*/
class Solution {
    int sum = 0;
    public int findTilt(TreeNode root) {
        traverse(root);
        return sum;
    }
    
    public int traverse(TreeNode node) {
        if(node == null)
            return 0;
        
        int left = traverse(node.left);
        int right = traverse(node.right);
        
        // this calculates the tilt of node
        sum+=Math.abs(left-right);
        // this will make sure the sum of the whole tree start from node get returned
        
        return left+right+node.val;
    }
}
