/*
  Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

  Find all the elements that appear twice in this array.

  Could you do it without extra space and in O(n) runtime?

  Example:
  Input:
  [4,3,2,7,8,2,3,1]

  Output:
  [2,3]
*/

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> res = new ArrayList<>();
        if(nums==null || nums.length==0)
            return res;
        
        for(int i=0;i<nums.length;i++) {
            // since a[i] is between 1 and n, so in perfect condition
            // all numbers are unique, and they will each fit in one slot
            // for each number, we determine the index it belongs to
            int newIndex = Math.abs(nums[i]) - 1;
            // if it is already negative, means we found a dup
            if(nums[newIndex] < 0) {
                res.add(Math.abs(nums[i]));
                continue;
            }
            // mark the element of that index to negative 
            // to indicate we have found the number that should really belong
            // there
            nums[newIndex] = -nums[newIndex];
        }
        return res;
    }
}
