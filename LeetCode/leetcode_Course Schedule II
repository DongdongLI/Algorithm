/*
  There are a total of n courses you have to take, labeled from 0 to n - 1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.

There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.

For example:

2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]

4, [[1,0],[2,0],[3,1],[3,2]]
There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be 
taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is[0,2,1,3].
*/

/*
    BFS: mostly same as the BFS solution in I. Since the result is required,
    First, add the "free to start courses" to result
    Second, Use BFS to find if there is any courses can be free, then add to result
*/

public class Solution {
	public int[] findOrder(int numCourses, int[][] prerequisites) {
    	// count the number of prerequisites for each course
    	int[] numOfPre=new int[numCourses];
    	int[] result=new int[numCourses];
    	// for each entry, 
    	for(int i=0;i<prerequisites.length;i++){
    		// [i][0] is the course, and [i][1] is the prerequisite for that course
    		numOfPre[prerequisites[i][0]]++;
    	}
    	//put courses that have no prerequisites in list
    	LinkedList<Integer> startCourse=new LinkedList<Integer>();
    	for(int i=0;i<numOfPre.length;i++)
    		if(numOfPre[i]==0)
    			startCourse.add(i);
    	
    	// number of courses that have no prerequisites
    	int numOfNoPre=startCourse.size();
    	
    	// total goal is to get the number of course that can be taken with the help of the first few classes
    	int start=0;
    	for(;start<startCourse.size();start++){
    		result[start]=startCourse.get(start);
    	}
    	
    	while(!startCourse.isEmpty()){
    		// take out one and see what it can help
    		int course=startCourse.remove();
    		
    		for(int i=0;i<prerequisites.length;i++){
    			// go through all courses, and when some course depends on this course
    			if(prerequisites[i][1]==course){
    				// deduct one, as this prerequisite is set
    				numOfPre[prerequisites[i][0]]--;
    				// when it is all set, it is free and it can come in to help other course
    				if(numOfPre[prerequisites[i][0]]==0){
    					numOfNoPre++;
    					startCourse.add(prerequisites[i][0]);
    					result[start++]=prerequisites[i][0];
    				}
    			}
    		}
    	}
    	if(numOfNoPre<numCourses)
    		return new int[0];
    	
    	return result;
    }
}
