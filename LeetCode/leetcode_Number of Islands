/*
  Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

  Example 1:
  
  11110
  11010
  11000
  00000
  Answer: 1
  
  Example 2:
  
  11000
  11000
  00100
  00011
  Answer: 3
*/

/*
    The idea is about Breath first search.
    
    Whenever an '1' is found, start from it, make all the land connected to it disappeared. Then this can be counted as 1 island.
    
    So check the top, down, left and right ones.
*/

public class Solution {
    
    public int numIslands(char[][] grid) {        
    	int count=0;
    	if(grid==null || grid.length==0)return count;
    	int m=grid.length;
    	int n=grid[0].length;
    	
    	int[][] t=new int[m][n];
    	
    	for(int i=0;i<m;i++){
    		for(int j=0;j<n;j++){
    			
    			if(grid[i][j]=='1'){
    				disappear(i, j, grid);
    				count++;
    			}
    		}
    	}
    	return count;
    }
    
    public void disappear(int x,int y,char[][] grid){
    	if(x<0 || x>grid.length-1)
    		return;
    	if(y<0||y>grid[0].length-1)
    		return;
    	if(grid[x][y]=='0')
    		return;
    	
    	grid[x][y]='0';

    	disappear(x-1, y, grid);
    	disappear(x, y-1, grid);
    	disappear(x, y+1, grid);
    	disappear(x+1, y, grid);
    }
}
