/*
 Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]

word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.
*/
/*ideas:
From one place, we can go up or down or left or right as long as the next point hasn't been visited yet.
It is considered as Depth First Search. From one spot, we check all its neighbours.
*/

public class Solution {
    static boolean[][] visited;
    public boolean exist(char[][] board, String word) {
        if(word.length()==0)return true;
		visited=new boolean[board.length][board[0].length];
		
		int m=board.length;
		int n=board[0].length;
		
		for(int i=0;i<m;i++)
			for(int j=0;j<n;j++)
			{
				if(DFS(board,word,0,i,j))return true;
			}
		return false;
    }
    public boolean DFS(char[][] board,String word,int len,int i, int j)
	{
		if(len==word.length())
		{
			return true;
		}
		if(i<0||j<0||i>=board.length||j>=board[0].length)
		return false;
		if(visited[i][j])
		{
			return false;
		}
		if(board[i][j]!=word.charAt(len))
			return false;
		
		visited[i][j]=true;
		boolean result= (DFS(board,word,len+1,i-1,j)||DFS(board,word,len+1,i+1,j)||DFS(board,word,len+1,i,j-1)||DFS(board,word,len+1,i,j+1));
		visited[i][j]=false;//very important
		return result;
	}
}
//2015/12/22: it has been a long while, but I remember 80% of it.
