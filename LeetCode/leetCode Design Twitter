/*
   Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed. Your design should support the following methods:

  postTweet(userId, tweetId): Compose a new tweet.
  getNewsFeed(userId): Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.
  follow(followerId, followeeId): Follower follows a followee.
  unfollow(followerId, followeeId): Follower unfollows a followee.
  Example:

  Twitter twitter = new Twitter();

  // User 1 posts a new tweet (id = 5).
  twitter.postTweet(1, 5);

  // User 1's news feed should return a list with 1 tweet id -> [5].
  twitter.getNewsFeed(1);

  // User 1 follows user 2.
  twitter.follow(1, 2);

  // User 2 posts a new tweet (id = 6).
  twitter.postTweet(2, 6);

  // User 1's news feed should return a list with 2 tweet ids -> [6, 5].
  // Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.
  twitter.getNewsFeed(1);

  // User 1 unfollows user 2.
  twitter.unfollow(1, 2);

  // User 1's news feed should return a list with 1 tweet id -> [5],
  // since user 1 is no longer following user 2.
  twitter.getNewsFeed(1);
*/

/*
  trivial solution will get you stuck at the last test because it takes too long.
  
  Use PriorityQueue to pick up tweets based on the created timestamp
*/

public class Twitter {

    int time = 0;

    Map<Integer, User> userMap;
    
    class Tweet{
        int userId;
        int tweetId;
        public int timeStamp;
        Tweet next;
        Tweet(int userId, int tweetId) {
            this.userId = userId;
            this.tweetId = tweetId;
            timeStamp = time++;
            next = null;
        }
    }
    
    class User {
        int userId;
        Set<Integer> followMap;
        Tweet mostRescentTweet;
        
        User(int userId){
            this.userId = userId;
            followMap = new HashSet<Integer>();
            follow(userId);
            mostRescentTweet = null;
        }
        
        void follow(int userId){
            followMap.add(userId);
        }
        
        void unfollow(int userId){
            followMap.remove(userId);
        }
        
        void post(int tweetId){
            Tweet tweet = new Tweet(userId, tweetId);
            tweet.next = mostRescentTweet;
            mostRescentTweet = tweet;
        }
    }
    
    /** Initialize your data structure here. */
    public Twitter() {
        userMap = new HashMap<Integer, User>();
    }
    
    /** Compose a new tweet. */
    public void postTweet(int userId, int tweetId) {
        if(!userMap.containsKey(userId)){
            userMap.put(userId, new User(userId));
        }
        userMap.get(userId).post(tweetId);
    }
    
    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
    public List<Integer> getNewsFeed(int userId) {
        List<Integer> res = new LinkedList<Integer>();
        
        if(!userMap.containsKey(userId))return res;
        
        Set<Integer> following = userMap.get(userId).followMap;
        
        PriorityQueue<Tweet> allTweets = new PriorityQueue<>(following.size(), new Comparator<Tweet>() {

			@Override
			public int compare(Tweet o1, Tweet o2) {
				return o2.timeStamp - o1.timeStamp;
			}
		});
        for(Integer id: following) {
            if(userMap.get(id)!=null && userMap.get(id).mostRescentTweet != null)
                allTweets.add(userMap.get(id).mostRescentTweet);
        }
        while(!allTweets.isEmpty() && res.size()<10 ){
            Tweet t = allTweets.poll();
            res.add(t.tweetId);
            if(t.next!= null)
                allTweets.add(t.next);
        } 
        
        return res;
    }
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    public void follow(int followerId, int followeeId) {
        
        if(!userMap.containsKey(followerId))
            userMap.put(followerId, new User(followerId));
        
        userMap.get(followerId).followMap.add(followeeId);
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    public void unfollow(int followerId, int followeeId) {
        
        if(followerId == followeeId || !userMap.containsKey(followerId))return;
        
        userMap.get(followerId).followMap.remove(followeeId);
    }
}

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * List<Integer> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */
