/*
  Write a program to find the n-th ugly number.

  Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 
  is the sequence of the first 10 ugly numbers.
  
  Note that 1 is typically treated as an ugly number.
*/

/*
  Based on the existing "1", we can iteratively multiple 2, 3, 5 to get more ugly numbers
*/

public class Solution {
    public int nthUglyNumber(int n) {
        if(n<=0)return 0;
    	
    	int[] ugly=new int[n];
    	ugly[0]=1;
    	// the index helps to every number chances to multiple 2 3 and 5. 
    	int index2=0;
    	int index3=0;
    	int index5=0;
    	
    	for(int i=1;i<n;){
    		int min=Math.min(2*ugly[index2], Math.min(3*ugly[index3], 5*ugly[index5]));// get a minimum number for current spot
    		
    		if(min==2*ugly[index2]){
    			index2++;
    		}else if(min ==3*ugly[index3]){
    			index3++;
    		}else{
    			index5++;
    		}
    		
    		if(min==ugly[i-1]) // avoid situation like 2*3 and 3*2
    			continue;
    		else
    		{
    			ugly[i]=min;
    			i++;
    		}
    		
    	}
    	return ugly[n-1];
    }
}

//2015/12/28: got the idea, but couldn't make it. so close
public class Solution {
    public int nthUglyNumber(int n) {
        int[] ugly=new int[n];
		ugly[0]=1;
		int ind2=0,ind3=0,ind5=0; // 
		for(int i=1;i<n;){
			int res2=ugly[ind2]*2;
			int res3=ugly[ind3]*3;
			int res5=ugly[ind5]*5;
			
			int min=Math.min(res2, Math.min(res3, res5));// the min of the three is the next ugly number
			
			// it covers all the possibilities
			if(min==res2){
				ind2++; // try to * 2 for  next ugly number 
			}else if(min==res3){
				ind3++;
			}else if(min==res5){
				ind5++;
			}
			// 2*3==3*2
			if(min==ugly[i-1]){
				continue;// skip number
			}else{
				ugly[i++]=min;
			}
		}
		return ugly[n-1];
    }
}
