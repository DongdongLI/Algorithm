/*
  Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.

  Example 1:
  Input:

  "bbbab"
  Output:
  4
  One possible longest palindromic subsequence is "bbbb".
  Example 2:
  Input:

  "cbbd"
  Output:
  2
  One possible longest palindromic subsequence is "bb".
*/

/*
  dp[i][j] is the longest between i and j
  when charAt(i) = charAt[j]
    dp[i][j] = dp[i+1][j-1]+2
    
  also dp[n][n] = 1;
  
  the key is to remember start the i from the end of the string, move it left wards
*/
class Solution {
    public int longestPalindromeSubseq(String s) {
        if(s==null || s.length() == 0)
            return 0;
        
        int len = s.length();
        int[][] dp = new int[len][len];
        
        for(int i=len-1;i>=0;i--){
            dp[i][i] = 1;
            for(int j=i+1;j<len;j++){
                if(s.charAt(i) == s.charAt(j)){
                    if(j==i+1)
                        dp[i][j] = 2;
                    else
                        dp[i][j] = 2+dp[i+1][j-1];
                }
                else{
                    dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]);
                }
            }
        }
        
        return dp[0][len-1];
    }
}
