/*
  Given a string, find the length of the longest substring without repeating characters. For example, 
  the longest substring without repeating letters for "abcabcbb" is "abc", which the length is 3. For "bbbbb" the longest 
  substring is "b", with the length of 1.
*/

/*
  Trivial Solution: two pointers check one by one, accept but very slow.
*/

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s==null || s.length() == 0)
            return 0;
                
        Set<Character> set = new HashSet<>();
        int max = 1;
        
        
        for(int i=0;i<s.length();i++){
            
            int len = 0;
            
            if(set.size() != 0){
                max = Math.max(max, set.size());
                set.clear();
            }
            
            for(int j=i;j<s.length();j++){
                char c = s.charAt(j);
                
                if(!set.contains(c)){
                    set.add(c);
                    len++;
                }
                else{
                    max = Math.max(max, len);
                    set.clear();
                    break;
                }
            }
        }
        
        
        return max;
    }
}
/*
	The right method to use, HashMap
*/
public class Solution {
    public int lengthOfLongestSubstring(String s) {
    	if(s==null || s.length()==0)
    		return 0;
    	// j in the front, i far left(more advanced)
    	Map<Character,Integer> map=new HashMap<Character, Integer>();//keep tracking the latest location of appearance of each letter
    	int max=0;
    	for(int i=0,j=0;i<s.length();i++){
    		if(map.containsKey(s.charAt(i))){ // duplicate found
    			j=Math.max(j, map.get(s.charAt(i))+1); 
    		}
    		map.put(s.charAt(i), i); // update location
    		max=Math.max(max, i-j+1); // update max
    	}
    	return max;
    }
}
//2015/10/19 Finish with Hashmap solution.

//2015/12/26: nail it with trivial solution:, but I think the above solution will be a little bit faster 
for(int i=0;i<s.length()-1;i++){
	int j=i+1;
	set.add(s.charAt(i));
	while(j<s.length()&&!set.contains(s.charAt(j))){
		set.add(s.charAt(j++));
	}
	max=Math.max(max, j-i);
	set.clear();
}
