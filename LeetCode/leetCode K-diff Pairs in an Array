/*
  Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.

  Example 1:
  Input: [3, 1, 4, 1, 5], k = 2
  Output: 2
  Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
  Although we have two 1s in the input, we should only return the number of unique pairs.
  Example 2:
  Input:[1, 2, 3, 4, 5], k = 1
  Output: 4
  Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).
  Example 3:
  Input: [1, 3, 1, 5, 4], k = 0
  Output: 1
  Explanation: There is one 0-diff pair in the array, (1, 1).
*/

/*
  Trivial solution: 
    for each element in the array, go and find if its partner (nums[i]+k, nums[i]-k) is in the array
      that requires:
         sort the array
         a set contains all the number
         a map knowing how many times each elements have shown up only for the occasion that k==0
*/

class Solution {
    public int findPairs(int[] nums, int k) {
        if(k<0)return 0;
        
        Arrays.sort(nums);
        Set<Integer> set = new HashSet<>();
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer num: nums){
            set.add(num);
            if(map.containsKey(num))
                map.put(num, map.get(num)+1);
            else
                map.put(num, 1);
        }
        
        int res = 0;
        
        for(int i=0;i<nums.length;i++){
            while(i+1<nums.length && nums[i+1]==nums[i])
                i++;
            if(k==0 && map.containsKey(nums[i]) && map.get(nums[i]) >1)
                res++;
            else if( k!=0 && set.contains(nums[i]+k))
                res++;
        }
        
        return res;
    }
}
// why do you need a set when you have a map already???
class Solution {
    public int findPairs(int[] nums, int k) {
        if(k<0)return 0;
        
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer num: nums){
            if(map.containsKey(num))
                map.put(num, map.get(num)+1);
            else
                map.put(num, 1);
        }
        
        int res = 0;
        
        for(Map.Entry<Integer, Integer> entry: map.entrySet()){
            if(k==0){
                if(entry.getValue()>1)
                res++;
            }
            else
                if(map.containsKey(entry.getKey()+k))
                    res++;
        }
        return res;
    }
}
