/*
  Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

  For example,
  Given nums = [0, 1, 3] return 2.
  
  Note:
  Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?


*/

/*
    Trivial Idea:
      Put everything in the array to a HashSet, then start from 0, check which number is not in there.
*/
public class Solution {
    public int missingNumber(int[] nums) {
        if(nums==null || nums.length==0)
        	return 0;
        
        Set<Integer> set=new HashSet<>();
        
    	for(int i:nums){
    		set.add(i); // insert numbers
    	}
    	int i;
    	for(i=0;i<=nums.length;i++){
    		if(!set.contains(i)) // check existence
    			break;
    	}
    	return i;
    }
}

/*
    One smart idea: the sum of 1 to n is (1+n)*n/2;
*/

public class Solution {
    public int missingNumber(int[] nums) {
        int sum=0;
        for(int i=0;i<nums.length;i++){
            sum+=nums[i];
        }
        return (1+nums.length)*nums.length/2-sum;
    }
}

// bit manipulation
/*
    1^1==0
    ...
    n^n==0;
*/
public class Solution {
    public int missingNumber(int[] nums) {
        if(nums==null || nums.length==0)
        	return 0;
        
        int result=nums.length; // send n in
        
        for(int i=0;i<nums.length;i++){
        	result^=nums[i]; // send all the element in 
        	result^=(i); // send 0 to n-1;
        }
        
    	return result;
    }
}
