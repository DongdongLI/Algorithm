/*
  Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.

  For example, given the following matrix:

  1 0 1 0 0
  1 0 1 1 1
  1 1 1 1 1
  1 0 0 1 0
  Return 4.
*/

/*
    Idea:
      Dynamic Programming is obvious:
        t[i][j]=min(t[i][j-1],t[i-1][j],t[i-1][j-1])+1
        
        t[i][j] means, make matrix[i][j] as the bottom right node of a square, how large can it be
        
        the first row and first column of the dp[][] will be the same as the matrix. since the largest square they are involved in is
        themselfs.
        
        the reason we use "min" is 
        for node [i-1][j] [i][j-1] and [i-1][j-1] all have to be the  bottom right node  for square in order to make
        [i][j] the  bottom right node. the min size means the final size.
*/

class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix == null || matrix.length == 0 )
            return 0;
        int max = 0;
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        
        for(int i=0;i<m;i++){
            if(matrix[i][0] == '1')max=1;
            dp[i][0] = matrix[i][0] == '1' ? 1:0;
        }
            
        
        for(int j=0;j<n;j++){
            if(matrix[0][j] == '1')max=1;
            dp[0][j] = matrix[0][j] =='1' ? 1:0;
        }
        
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if(matrix[i][j] == '1'){
                    dp[i][j] = Math.min(dp[i][j-1], Math.min(dp[i-1][j], dp[i-1][j-1])) +1;
                    max = Math.max(max, dp[i][j]);
                }
                else
                    dp[i][j] = 0;
            }
        }
        return max*max;
    }
}

// 2015/12/29: kind of crack it out.
