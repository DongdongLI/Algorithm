/*
  Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.

  For example, given the following matrix:

  1 0 1 0 0
  1 0 1 1 1
  1 1 1 1 1
  1 0 0 1 0
  Return 4.
*/

/*
    Idea:
      Dynamic Programming is obvious:
        t[i][j]=min(t[i][j-1],t[i-1][j],t[i-1][j-1])+1
        
        t[i][j] means, make matrix[i][j] as the bottom right node of a square, how large can it be
*/

public class Solution {
    public int maximalSquare(char[][] matrix) {
           if(matrix==null || matrix.length==0)
               return 0;
           
           int m=matrix.length;
           int n=matrix[0].length;
           // this is DP array
           int[][] t=new int[m][n];
           // for element in first column
           for(int i=0;i<m;i++){
               t[i][0]=Integer.valueOf(matrix[i][0]-48);
           }
           // for elements in first row
           for(int i=0;i<n;i++){
               t[0][i]=Integer.valueOf(matrix[0][i]-48);
           }
           // start the inside
           for(int i=1;i<m;i++){
               for(int j=1;j<n;j++){
                   if(matrix[i][j]=='1'){
                       int min=Integer.min(t[i-1][j-1], Integer.min(t[i-1][j], t[i][j-1]));
                       t[i][j]=min+1;
                   }else{
                       t[i][j]=0;
                   }
               }
           }
           // find the largest
           int max=0;
           for(int i=0;i<m;i++){
               for(int j=0;j<n;j++){
                   if(t[i][j]>max)
                       max=t[i][j];
               }
           }
           return max*max;
    }
}

// 2015/12/29: kind of crack it out.
