/*
  Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are 
  drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a 
  container, such that the container contains the most water.

  Note: You may not slant the container.
*/

/*
  Idea: the area of the container is determined by the shorter edge.
  
  the left start at 0, the right starts at the last available index.
  
  in each iteration, 1. compute the area, compare it with the max, update it if necessary
                     2. move the index with the shorter edge, since the area could be increased only in this way (short edge is
                     get rid of)
*/

public class Solution {
    public int maxArea(int[] height) {
        
        int left=0;
        int right=height.length-1;
        
        int max=getArea(height, left, right);
        
        while(left<right){
        	max=Math.max(max, getArea(height, left, right));
        	if(height[left]<height[right]){
        		left++;
        	}else{
        		right--;
        	}
        }
        return max;
    }
    // simply return the area
    public int getArea(int[] height, int l,int r){
    	return Math.min(height[l], height[r])*(r-l);
    }
}
