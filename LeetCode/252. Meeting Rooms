/*
  Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), determine if a person could attend all meetings.

  For example,
  Given [[0, 30],[5, 10],[15, 20]],
  return false.
*/

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public boolean canAttendMeetings(Interval[] intervals) {
        if(intervals == null || intervals.length==0)
            return true;
        // sort by start time first, then end date
        Arrays.sort(intervals, new Comparator<Interval>(){
            @Override
            public int compare(Interval i1, Interval i2){
                if(i1.start != i2.start)
                    return i1.start-i2.start;
                else
                    return i1.end-i2.end;
            }
        });
        // if an meeting starts before the previous meeting ends, or two meeting start at the same time not going to work
        for(int i=1;i<intervals.length;i++){
            if(intervals[i].start == intervals[i-1].start || intervals[i].start<intervals[i-1].end)
                return false;
        }
        
        return true;
    }
}
