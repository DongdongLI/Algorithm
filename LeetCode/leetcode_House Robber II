/*
  Note: This is an extension of House Robber.

  After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will 
  not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is 
  the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous 
  street.
  
  Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of 
  money you can rob tonight without alerting the police.
*/

/*
  idea:
    to make the problem easier, we break down the circle to a row by choosing not to rob a house.
    
    with help of the previous problem, we pick the larger profit from "not robbing the first house" and "not robbing the last houst"



    robhelp is from the previous problem
*/

public class Solution {
    public int robHelp(int[] nums,int l,int r) {
        
        int include=0;
        int exclude=0;
        for(int j=l;j<=r;j++){
        	int i=include;
        	int e=exclude;
        	
        	include=e+nums[j];// include this house
        	exclude=Math.max(e, i); // skip this house
        }
        return Math.max(include, exclude);
    }
    public int rob(int[] nums) {
        if(nums==null || nums.length==0)
        	return 0;
        if(nums.length==1)
        	return nums[0];
        // to skip which house
        return Math.max(robHelp(nums, 0, nums.length-2), robHelp(nums, 1, nums.length-1));
    }
}
