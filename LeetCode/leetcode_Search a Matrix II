/*
  Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

  Integers in each row are sorted in ascending from left to right.
  Integers in each column are sorted in ascending from top to bottom.
  For example,
  
  Consider the following matrix:
  
  [
    [1,   4,  7, 11, 15],
    [2,   5,  8, 12, 19],
    [3,   6,  9, 16, 22],
    [10, 13, 14, 17, 24],
    [18, 21, 23, 26, 30]
  ]
  Given target = 5, return true.
  
  Given target = 20, return false.
*/
/* (The running time seems a little bit slow)
  since each row and column is sorted
  smallest in the up left, largest in the bottom right
  
  we start at the bottom left, if the target is larger than m[x][y]
    y++, so we can look for larger element
      if the target is smaller than m[x][y]
    x--, so we move up to find smaller element
*/
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
    	if(matrix==null || matrix.length==0)return false;
    	//bottom left
    	int x=matrix.length-1;
    	int y=0;
    	// mark the border
    	while(x>=0 && y<matrix[0].length){
    		if(target==matrix[x][y])
    			return true;
    		else if(target>matrix[x][y]){ // go right
    			y++;
    		}
    		else
    			x--; // go up
    	}
    	return false;
    }
    
}
