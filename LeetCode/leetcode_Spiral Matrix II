/*
Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.

For example,
Given n = 3,
You should return the following matrix:

[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]

*/

/*
Based on the ideas about Spiral Matrix I, we insert the value in circle. Each full loop either finish a complete circle or only
fill in the very center last one.

Do be careful about the situation when n is odd since there will be 1 cell left in the middle at last.
*/


public class Solution {
    public int[][] generateMatrix(int n) {
        if(n==1)
        {
        	int[][] result=new int[1][1];
        	result[0][0]=1;
        	return result;
        }
        int[][] result=new int[n][n];
        int temp=n;
        int x=0;
        int y=0;
        
        int q=1;
        while(x<temp&&y<temp)
        {
        	
        	
        	for(int i=0;i<n-1;i++)
        	{
        		result[x][y]=q;
        		q++;
        		y++;
        	}
        	for(int i=0;i<n-1;i++)
        	{
        		result[x][y]=q;
        		q++;
        		x++;
        	}
        	for(int i=0;i<n-1;i++)
        	{
        		result[x][y]=q;
        		q++;
        		y--;
        	}
        	for(int i=0;i<n-1;i++)
        	{
        		result[x][y]=q;
        		q++;
        		x--;
        	}
        	x++;
        	y++;
        	n-=2;
        	//System.out.println("n:"+n);
        	if(n==1)
        	{
        		result[x][y]=q;
        		break;
        	}
        }
        return result;
    }
}

// 2015/12/22: based on the new solution of "Spiral Matrix", I nailed this one.

public class Solution {
    public int[][] generateMatrix(int n) {
        int[][] mat=new int[n][n];
		
		int num=1;
		int rowBegin=0;
		int colBegin=0;
		int rowEnd=n-1;
		int colEnd=n-1;
		
		while(num<=n*n && rowBegin<=rowEnd && colBegin<=colEnd){
			for(int i=colBegin;i<=colEnd;i++)
				mat[rowBegin][i]=num++;
			rowBegin++;
			
			for(int i=rowBegin;i<=rowEnd;i++)
				mat[i][colEnd]=num++;
			colEnd--;
			
			for(int i=colEnd;i>=colBegin;i--)
				mat[rowEnd][i]=num++;
			rowEnd--;
			
			for(int i=rowEnd;i>=rowBegin;i--)
				mat[i][colBegin]=num++;
			colBegin++;
		}
		return mat;
    }
}
