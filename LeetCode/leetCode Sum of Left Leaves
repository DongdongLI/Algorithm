/*
  Find the sum of all left leaves in a given binary tree.

  Example:

      3
     / \
    9  20
      /  \
     15   7

  There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.
*/

/*
  to determine if a node is a left leaf, we should look at its parent
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int sum = 0;
    
    public int sumOfLeftLeaves(TreeNode root) {
        if(root == null)
            return sum;
        
        if(root.left == null && root.right == null) // if there is just a root node, it should not be considered as a leaf
            return sum;
            
        help(root);
        
        return sum;
    }
    
    public void help(TreeNode root) {
        // find out if the left child of current node is a left leaf
        if(root.left!=null && root.left.left == null && root.left.right == null){
            sum += root.left.val;
        }
        // keep checking its right child and the left child
        if(root.right!=null)
            help(root.right);
        if(root.left != null)
            help(root.left);
        
    }
}
/*
  Use a boolean to mark whether a node is left child, which will be cleaner
*/
class Solution {
    int sum = 0;
    public int sumOfLeftLeaves(TreeNode root) {
        if(root == null)
            return 0;
        
        helper(root, false);
        
        return sum;
    }
    
    public void helper(TreeNode node, boolean isLeft) {
        if(node.left == null && node.right == null && isLeft){
            sum+= node.val;
            return;
        }
        if(node.left != null)
            helper(node.left, true);
        if(node.right != null)
            helper(node.right, false);
    }
}
