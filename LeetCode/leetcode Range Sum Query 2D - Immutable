/*
  Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

  Range Sum Query 2D
  The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.

  Example:
  Given matrix = [
    [3, 0, 1, 4, 2],
    [5, 6, 3, 2, 1],
    [1, 2, 0, 1, 5],
    [4, 1, 0, 1, 7],
    [1, 0, 3, 0, 5]
  ]

  sumRegion(2, 1, 4, 3) -> 8
  sumRegion(1, 1, 2, 2) -> 11
  sumRegion(1, 2, 2, 4) -> 12
  Note:
  You may assume that the matrix does not change.
  There are many calls to sumRegion function.
  You may assume that row1 ≤ row2 and col1 ≤ col2.
*/

/*
  Solution is:
  
  1. calculate any rectangle area form by (0,0) to (i,j)
  2. calculate any rectangle area form by (a,b) to (c,d) by:
    (0,0) to (c,d)
    - (0,0) to (a,d)
    - (0,0) to (c,b)
    + (0,0) to (a,b)
    
    keep an eye on which column or row need to be included or excluded
*/

public class NumMatrix {

    int[][] nums;
    int[][] knownSum;
    public NumMatrix(int[][] matrix) {
        this.nums = matrix;
        if(matrix.length==0){
            this.knownSum = new int[0][0];
        }
        else{
            this.knownSum = new int[matrix.length+1][matrix[0].length+1];

            for(int i=1;i<knownSum.length;i++)
                for(int j=1;j<knownSum[0].length;j++){
                    // try visualize how to disassemble a block
                    knownSum[i][j] = knownSum[i-1][j] + knownSum[i][j-1] - knownSum[i-1][j-1] + nums[i-1][j-1];
                }
        }
    }
    
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        return knownSum[row2+1][col2+1]-knownSum[row1][col2+1] - knownSum[row2+1][col1]+knownSum[row1][col1];
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */
