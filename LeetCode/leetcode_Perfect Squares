/*
  Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.
  
  For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.
  
  Credits:
  Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.
*/

/*
    Dynamic programming:
      all numbers from 1 to n can be covered in this manner:
      0+1*1   1+1*1   2+1*1   3+1*1...
      1+1*1   2+1*1   3+1*1   4+1*1...
      
      in other word
      i+j*j
      
      j*j is a square number, so dp[i+j*j]= min(dp[i+j*j],dp[i]+1), keep makeing the value smaller
*/

public class Solution {
    public int numSquares(int n) {
        int[] dp=new int[n+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0]=0;
        for(int i=0;i<=n;i++){
        	for(int j=1;i+j*j<=n;j++){
        		dp[i+j*j]=Math.min(dp[i+j*j], dp[i]+1);
        	}
        }
        return dp[n];
    }
}

//2015/12/30: it has been a while. work it out but too slow.
