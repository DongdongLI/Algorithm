/*
  Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.
  Example 1:
  Input: [2,2,3,4]
  Output: 3
  Explanation:
  Valid combinations are: 
  2,3,4 (using the first 2)
  2,3,4 (using the second 2)
  2,2,3
  Note:
  The length of the given array won't exceed 1000.
  The integers in the given array are in the range of [0, 1000].
*/

class Solution {
    public int triangleNumber(int[] nums) {
        // it is a 3 sum problem 
        int i=2;
        int res = 0;
        if(nums==null || nums.length<3)
            return res;
        // sort it first
        Arrays.sort(nums);
        
        // i is the largest side
        for(;i<nums.length;i++){
            if(nums[i] == 0)
                continue;
            else{
                int left = 0;
                int right = i-1;
                while(left<right){
                    // if the sum of the two sides is larger than i, 
                    // plus i and left together are larger than right(since we sort it)
                    // we found a set of solutions
                    // for the "right" and "i", any chosen "left" between left and right would work
                    if(nums[right] + nums[left]>nums[i]){
                        res += (right - left);
                        // make "right" side smaller.
                        right--;
                    }
                    else{
                        left++;
                    }
                }
            }
        }
        
        return res;
    }
}
