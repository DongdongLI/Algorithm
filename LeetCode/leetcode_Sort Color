/*
  Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.
  
  Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.
*/

//2015/12/22: treat and remember the trivial solution: (two passes)

public class Solution {
    public void sortColors(int[] nums) {
        if(nums==null||nums.length==0)
			return;
		
		int sumR=0;
		int sumW=0;
		int sumB=0;
		
		for(int i:nums){
			if(i==0){
				sumR++;
			}else if(i==1){
				sumW++;
			}else{
				sumB++;
			}
		}
		
		int k=0;
		while(sumR>0){
			nums[k++]=0;
			sumR--;
		}
		while(sumW>0){
			nums[k++]=1;
			sumW--;
		}
		while(sumB>0){
			nums[k++]=2;
			sumB--;
		}   
    }
}

// the most outstanding solution
/*
	zero is the end of all 0s
	two is the start of all 2s
	
	what the code does is to put all the 0s in the front, all the 2s in the back. Then all 1s will stay in the middle
*/

public void sortColors(int[] nums) {
		// all 0s to the head, all 2s to the end, done.
		int zero=0;
		int two=nums.length-1;
		for(int i=0;i<nums.length;i++){
			while(nums[i]==2&&i<two)swap(nums,i,two--);
			while(nums[i]==0&&i>zero)swap(nums,i,zero++);
		}
		
    }
	public void swap(int[] nums,int a,int b){
		int temp=nums[a];
		nums[a]=nums[b];
		nums[b]=temp;
	}
