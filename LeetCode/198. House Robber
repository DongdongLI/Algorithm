/*
  You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, 
  the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and 
  it will automatically contact the police if two adjacent houses were broken into on the same night.

  Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount 
  of money you can rob tonight without alerting the police.


*/

/*
    Dynamic programming:
        the maximum of the first two houses is trivial
    
        since no two adjacent houses should be robbed at the same time,
        
        maxAmount[i]=Math.max(maxAmount[i-2]+nums[i], maxAmount[i-1]);
*/

class Solution {
    public int rob(int[] nums) {
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        
        for(int i=1;i<nums.length;i++){
            if(i==1)
                dp[i] = Math.max(nums[i], dp[i-1]);
            else                
                dp[i] = Math.max(dp[i-2]+nums[i], dp[i-1]);
        }
        
        return dp[nums.length-1];
    }
}
/*
  Yet another solution:
    for every house, include means the previous house is robbed, exclude means last one is not
    
    include= (previous exclude) + nums[j]
    
    
*/
public class Solution {
    public int rob(int[] nums) {
        if(nums==null || nums.length==0)
        	return 0;
        if(nums.length==1)return nums[0];
        
        int include=0;
        int exclude=0;
        for(int j=0;j<nums.length;j++){
        	int i=include;
        	int e=exclude;
        	
        	include=e+nums[j];
        	exclude=Math.max(e, i);
        }
        return Math.max(include, exclude);
    }

2015/12/27: nail it with a shorter and faster solution
public class Solution {
    public int rob(int[] nums) {
        if(nums==null||nums.length==0)
			return 0;
		else if(nums.length==1)
			return nums[0];
		else if(nums.length==2)
			return Math.max(nums[0], nums[1]);
		
		int[] dp=new int[nums.length]; // the maximum profit to make ending at house i.
		dp[0]=nums[0]; // initialize the first index: rob house 0 for sure
		dp[1]=Math.max(dp[0], nums[1]); // either 0 or 1
		for(int i=2;i<dp.length;i++){
			dp[i]=Math.max(dp[i-2]+nums[i], dp[i-1]); for all the house after: we can choose between : ...,i-2,i or ...,i-1,...
		}
		return dp[dp.length-1];
    }
}
