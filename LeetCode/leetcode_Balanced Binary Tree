/*
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. 
*/

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 /*ideas*/
 /*
 if a node is null, return 0 to its parent
 if it is a leaf, return its depth+1 to its parent
 for a node has inbalanced children, return -1 to its parent
 for a node has children have not balanced depth, return -1 to its parent
 */
 
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root==null)
        	return true;
        if(getHeight(root)!=-1)return true;
        else return false;
    }
    public int getHeight(TreeNode root)
	{
		if(root==null)
			return 0;
		
		int left=getHeight(root.left);
		int right=getHeight(root.right);
		if(left==-1 || right==-1)
			return -1;
		if(Math.abs(left-right)>1)
			return -1;
		return Math.max(getHeight(root.left), getHeight(root.right))+1;
	}
}


// 2016/1/7: Almost nail it. See you next time
