/*
  Given a linked list, remove the nth node from the end of list and return its head.

  For example,
  
     Given linked list: 1->2->3->4->5, and n = 2.
  
     After removing the second node from the end, the linked list becomes 1->2->3->5.
  Note:
  Given n will always be valid.
  Try to do this in one pass.
*/

/*
  Idea: two pointer strategy. 
  fast pointer first move n times, then two of them move together.
  when the fast one reaches the end, the slow one is in position.
  slow.next=slow.next.next; 
  this deletes the target node
*/

public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
    	ListNode dumbHead=new ListNode(0);
    	dumbHead.next=head;
    	head=dumbHead;
    	ListNode slow=head;
    	ListNode fast=head;
    	
    	for(int i=0;i<n;i++)
    		fast=fast.next;
    	
    	while(fast.next!=null){
    		slow=slow.next;
    		fast=fast.next;
    	}
    	slow.next=slow.next.next;
    	return dumbHead.next;
    }
}

//2015/10/22: nail it.
