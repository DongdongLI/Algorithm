/*
  Given a non-empty integer array of size n, find the minimum number of moves required to make all array elements equal, where a move is incrementing n - 1 elements by 1.

  Example:

  Input:
  [1,2,3]

  Output:
  3

  Explanation:
  Only three moves are needed (remember each move increments two elements):

  [1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]
*/

/*

  // of course the smart way comes first
  if you look closer you will find the final result is the sum of the distance of the minimum element to every other element
  
  if you can't see it, try
  1,3,9
  1,2,3,9
  1,2,3,4,5
  

  The solution is:
  
  while(everybody is still not the same){
    find the min, max,
    start increase everybody other than max untill the min==max
    again
  }
*/

public class Solution {
    public int minMoves(int[] nums) {
        
        int res = 0;
        int min = nums[0];
        
        for(int i: nums)
            if(i<min)
                min=i;
        
        for(int i=0;i<nums.length;i++)
            res += nums[i]-min;
        
        return res;
    }
}
