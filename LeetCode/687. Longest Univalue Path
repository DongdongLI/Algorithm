/*
  Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.

  Note: The length of path between two nodes is represented by the number of edges between them.

  Example 1:

  Input:

                5
               / \
              4   5
             / \   \
            1   1   5
  Output:

  2
  Example 2:

  Input:

                1
               / \
              4   5
             / \   \
            4   4   5
  Output:

  2
  Note: The given binary tree has not more than 10000 nodes. The height of the tree is not more than 1000.
*/

class Solution {
    int max = Integer.MIN_VALUE;
    public int longestUnivaluePath(TreeNode root) {
        if(root == null)
            return 0;
        
        getLen(root, root.val);
        return max;
    }
        
    public int getLen(TreeNode node, int val){
        if(node == null)
            return 0;
        
        int leftLen = getLen(node.left, node.val);
        int rightLen = getLen(node.right, node.val);
        // update the max with the length of path crossing current node (it is counting edges)
        max = Math.max(max, leftLen+rightLen);
        // return the length of longest path START at current node
        // if value is the same, take it in. or 0
        if(node.val == val)
            return 1+Math.max(leftLen, rightLen);
        else
            return 0;
    }
}
