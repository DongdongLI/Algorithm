/*
  Given an integer array with even length, where different numbers in this array represent different kinds of candies. Each number means one candy of the corresponding kind. You need to distribute these candies equally in number to brother and sister. Return the maximum number of kinds of candies the sister could gain.

  Example 1:
  Input: candies = [1,1,2,2,3,3]
  Output: 3
  Explanation:
  There are three different kinds of candies (1, 2 and 3), and two candies for each kind.
  Optimal distribution: The sister has candies [1,2,3] and the brother has candies [1,2,3], too. 
  The sister has three different kinds of candies. 
  Example 2:
  Input: candies = [1,1,2,3]
  Output: 2
  Explanation: For example, the sister has candies [2,3] and the brother has candies [1,1]. 
  The sister has two different kinds of candies, the brother has only one kind of candies. 
  Note:

  The length of the given array is in range [2, 10,000], and will be even.
  The number in given array is in range [-100,000, 100,000].
*/

/*
  Greedy: sister pick as many kinds of candies as possible. (less than half of the amount of all the candies)
    sort the array
    find different types
*/

public class Solution {
    public int distributeCandies(int[] candies) {
        Arrays.sort(candies);
        
        int totalAmount = candies.length;
        int res = 0;
        
        for(int i=0;i<totalAmount && res<(totalAmount/2);i++){
            if(i==0){
                res++;
                continue;
            }
            while(i<totalAmount && candies[i] == candies[i-1]){
                i++;
            }
            if(i==totalAmount) break;
            res++;
        }
        
        return res;
    }
}

/*
  Same idea, but using set is a lot faster
  
  1. calculate how many different types of candies we have here
  2. if the num of types is more than half of the total amount, than sister can take half of the total amount
     if it's less, than the greedy sister can take all these kinds
*/
// solution 2
public class Solution {
    public int distributeCandies(int[] candies) {
        Set<Integer> set = new HashSet<Integer>();
        int totalAmount = candies.length;
        
        for(int i: candies)
            set.add(i);
        
        if(set.size()>= totalAmount/2 )
            return totalAmount/2;
        else
            return set.size();
    }
}
