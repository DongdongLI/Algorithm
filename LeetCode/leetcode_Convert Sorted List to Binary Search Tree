/*
  Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	static ListNode head;
	public TreeNode sortedListToBST(ListNode head) {
        this.head=head;
        int len=0;
        ListNode p=head;
        while(p!=null){
        	len++;
        	p=p.next;
        }
        return sortedListToBST(0, len-1);
    }
	public TreeNode sortedListToBST(int start, int stop){
		if(start>stop)return null;
		
		int mid=(stop-start)/2+start;
		
		TreeNode left=sortedListToBST(start, mid-1);
		TreeNode parent=new TreeNode(head.val);
		parent.left=left;
		
		head=head.next;
		
		TreeNode right=sortedListToBST(mid+1, stop);
		parent.right=right;
		
		
		return parent;
	}
}

//2015/12/8: completely forgot, don't really understand the method.

// yet another method, easier to understand
public TreeNode sortedListToBST(ListNode head) {
    if(head==null)return null;
		
		ListNode fast=head;
		ListNode slow=head;
		ListNode temp=null;
		
		while(fast.next!=null && fast.next.next!=null){
			fast=fast.next.next;
			temp=slow;
			slow=slow.next;
		}
		
		if(temp!=null)
			temp.next=null;
		else
			head=null;//???
		
		TreeNode root=new TreeNode(slow.val);
		root.left=sortedListToBST(head);
		root.right=sortedListToBST(slow.next);
		
		return root;
}

// by far the most concise snd intuitive way

class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        if(head == null)return null;
        else if(head.next == null)return new TreeNode(head.val);
        
        ListNode fast = head, slow = head;
        while(fast.next!=null && fast.next.next!=null){
            fast = fast.next.next;
            slow = slow.next;
        }
        
        TreeNode root = new TreeNode(slow.val);
        
        // find the node before root;
        ListNode node = head;
        while(node!=null && node.next!=slow)
            node = node.next;
        
        if(node!=null)
            node.next = null;
        
        if(node == null)
            root.left = null;
        else
            root.left = sortedListToBST(head);
    
        root.right = sortedListToBST(slow.next);
        
        return root;
    }
}

