/*
  Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.
  A region is captured by flipping all 'O's into 'X's in that surrounded region.
  For example,
  X X X X
  X O O X
  X X O X
  X O X X
  After running your function, the board should be:
  X X X X
  X X X X
  X X X X
  X O X X

*/

class Solution {
    public void solve(char[][] board) {
        if(board==null || board.length<=2||board[0].length<=2)
            return;
        
        int m = board.length;
        int n = board[0].length;
        // check the 4 boundries, since the O on the boundary will stays to be 'O' so mark them first
        for(int i=0;i<m;i++){
            if(board[i][0] == 'O')
                dfs(board, i, 0);
            if(board[i][n-1] == 'O')
                dfs(board, i, n-1);
        }
        
        for(int j=0;j<n;j++){
            if(board[0][j] == 'O')
                dfs(board, 0, j);
            if(board[m-1][j] == 'O')
                dfs(board, m-1, j);
        }
        // from the boundary 'O's we can only get to those 'O's who are not surrounded, so now the * are the not surrounded Os, and we can marked the surrounded O as X
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j] == '*')
                    board[i][j] = 'O';
                else if(board[i][j] == 'O')
                    board[i][j] = 'X';
            }
        }
    }
    
    public void dfs(char[][] board, int x, int y){
        if(x<0||x>board.length-1||y<0||y>board[0].length-1)
            return;
        
        if(board[x][y] != 'O')
            return;
        board[x][y] = '*';
        
        dfs(board, x-1, y);
        dfs(board, x+1, y);
        dfs(board, x, y+1);
        dfs(board, x, y-1);
    }
}
