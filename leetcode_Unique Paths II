/*
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,

There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]

The total number of unique paths is 2.

Note: m and n will be at most 100.
*/
/*ideas:
Based on unique path, now when we meet obstacleGrid[i][j]==1, then s[i][j]=0
*/
public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length;
		int n=obstacleGrid[0].length;
		if(obstacleGrid[0][0]==1 || obstacleGrid[m-1][n-1]==1)return 0;
		int[][] s=new int[m][n];
		for(int i=0;i<m&&obstacleGrid[i][0]!=1;i++)
			s[i][0]=1;
		for(int j=0;j<n&&obstacleGrid[0][j]!=1;j++)
			s[0][j]=1;
		
		for(int i=1;i<m;i++)
			for(int j=1;j<n;j++)
			{
				if(obstacleGrid[i][j]==1)
					s[i][j]=0;
				else
				    s[i][j]=s[i-1][j]+s[i][j-1];
			}
		
		return s[m-1][n-1];
    }
}
