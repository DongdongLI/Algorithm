/*
    Design an algorithm and write code to find the first common ancestor of two nodes in a binary tree. Avoid storing 
    additional nodes in a data structure. (Not always a BST)
*/

/*solution 1:(if there is link to parent)*/
find difference their depths, and let the deeper one start going up for some step. and then they move together untill they merge

/*solution 2:*/
public boolean cover(TreeNode root,TreeNode node)
	{
		if(root==null)
			return false;
		if(root==node)
			return true;
		return cover(root.left,node) || cover(root.right,node);
	}
	
	public TreeNode help(TreeNode root,TreeNode p,TreeNode q)
	{
		if(root==null)return null;
		if(root==p || root==q)
			return root;
		
		boolean p_in_left=cover(root.left, p);
		boolean q_in_left=cover(root.left,q);
		
		if(p_in_left!=q_in_left)
			return root;
		
		TreeNode next=null;
		if(p_in_left==true)
			next=root.left;
		else
			next=root.right;
		
		return help(next, p, q);
	}
	public TreeNode findCommonAncestor(TreeNode root,TreeNode p,TreeNode q)
	{
		if(!cover(root, q) || !cover(root, p))
			return null;
		return help(root, p, q);			
	}
	
	/*solution 3*/
