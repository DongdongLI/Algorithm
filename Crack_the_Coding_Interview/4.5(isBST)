/*
    Implement of a function to check if a binary tree is a binary search tree.
*/
/*
    Solution 1: In order traverse and put all the node's value into array, if the array is sorted, it is a BST.
*/
//this is wrong [10,5,15,null,null,6,20]
public boolean isBST(TreeNode root)
	{
		if(root==null||root.left==null && root.right==null)
			return true;
		else if(root.left==null&&root.right!=null)
			return root.val<=root.right.val && isBST(root.right);
		else if(root.right==null&&root.left!=null)
			return root.val>=root.left.val && isBST(root.left);
		else
			return root.val<=root.right.val && isBST(root.right) && root.val>=root.left.val && isBST(root.left);
	}

//the right one

static public boolean isBST(TreeNode root)
	{
		ArrayList<TreeNode> allNode=new ArrayList<TreeNode>();
		help(root, allNode);
		for(int i=0;i<allNode.size()-1;i++)
		{
			if(allNode.get(i).val>=allNode.get(i+1).val)
				return false;
		}
		return true;
	}
	static void help(TreeNode root,ArrayList<TreeNode> allNode)
	{
		if(root==null)
			return;
		
		if(root.left!=null)
			help(root.left,allNode);
		allNode.add(root);
		if(root.right!=null)
			help(root.right,allNode);
	}
