/*
    Implement a function to check if a binary tree is balanced. For the purposes of this question, a balanced tree is 
    defined to be a tree such that the heights of the two subtrees of any node never differ by more than one.
*/

class TreeNode
{
	int val;
	TreeNode left;
	TreeNode right;
	public TreeNode(int v) {
		this.val=v;
		left=null;
		right=null;
	}
}


/*solution one*/
public boolean isBalanced(TreeNode root)
	{
		if(root==null)
			return true;
		else
			return isBalanced(root.left)&&isBalanced(root.right);
	}
	public int returnDepth(TreeNode root)
	{
		if(root==null)
			return 0;
		else if(root.left!=null && root.right==null)
			return returnDepth(root.left)+1;
		else if(root.right!=null && root.left==null)
			return returnDepth(root.right)+1;
		else
			return Math.max(returnDepth(root.left), returnDepth(root.right))+1;
		
	}
	
	/*solution two*/ //faster
	static public boolean isBalanced(TreeNode root)
	{
		if(root==null)
			return false;
		return
			returnDepth(root)==-1;
	}
	static public int returnDepth(TreeNode root)
	{
		if(root==null)
			return 0;
		int left=returnDepth(root.left);
		if(left==-1)
			return -1;
		int right=returnDepth(root.right);
		if(right==-1)
			return -1;
		
		if(Math.abs(left-right)>=1)
			return -1;
		
		return Math.max(left, right)+1;
	}
