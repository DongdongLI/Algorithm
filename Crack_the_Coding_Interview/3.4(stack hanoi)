/*
  In the classic problem of the Hanoi,you have 3 towers and N disksof different sizes which can slide onto any tower.
  Constraints: (1) one move at a time. (2) can only move the top. (3) one disk can only be placed on a larger one.
  Write a program to move the disks from the first tower to the last using Stacks.
*/

/*
    Tower original
    Tower buffer
    Tower destination
*/

public class test
{
	public static void main(String[] args)
	{
		tower[] t=new tower[3];
		for(int i=0;i<3;i++)
		{
			t[i]=new tower(i);
		}
		for(int i=2;i>=0;i--)
		{
			t[0].add(i);
		}
		t[0].moveDiskTo(3, t[2], t[1]);
	}
	
}
class tower
{
	int index;
	Stack<Integer> stack;
	public tower(int ind)
	{
		index=ind;
		stack=new Stack<Integer>();
	}
	public void add(int val)
	{
		if(!stack.isEmpty() && val>stack.peek())
			System.out.println("Adding disk error");
		else
			stack.push(val);
	}
	public void moveTopTo(tower t)
	{
		int top=stack.pop();
		t.add(top);
		System.out.println("Move disk "+top+" from "+this.index+" to "+t.index);
	}
	
	public void moveDiskTo(int n,tower dest,tower buf)/*iteration show the main idea*/
	{
		if(n>0)
		{
			moveDiskTo(n-1, buf, dest);
			moveTopTo(dest);
			buf.moveDiskTo(n-1, dest, this);
		}
	}
}
